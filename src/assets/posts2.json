{"adding-node-typescript-to-angular-app":{"body":"The Angular team continues to recommend [Monorepositories](https://danluu.com/monorepo/) as a solution to many common problems that developers encounter building software at scale.\n\nMore than once now, I've needed to build an API layer to give my Angular application access to backend processing, data, and functionality. You can do a lot of this with [Firebase functions](https://firebase.google.com/docs/functions/), but occasionally you want to take control of the full stack by having your own server.\n\nI've filmed a video version of this content as well:\n\n![Demos With Angular Live Coding](https://www.youtube.com/watch?v=Ad3fj9V7s6A)\n\nI know not everyone will agree with my choices, but hopefully this serves as both a starting point for developers looking to get started with this technique, and as an example for those looking to further adopt TypeScript into their backend architecture.\n\n## NodeJS with TypeScript\nThere are lots of great ways of configuring technologies like NodeJS, Express, etc, but I wanted to do this in a way that met two important criteria:\n\n* My server must live inside of my Angular application directory and in the same git repository\n* My server must be written in and run with TypeScript\n\n## The Process\nThe process I recommend has 6 steps:\n\n1. Create a server folder\n1. Give it its own dependencies\n1. Give it its own `tsconfig`\n1. Create an Express server with TypeScript\n1. Setup some routes\n1. Integrate my routes into my Angular app\n\n### 1. Add a folder for your server\nI like to create a folder right at the root level called `/server`. This is almost entirely a preference though. I like to treat my server as separately as possible from my client-side code. If you have a relatively complex Angular project with a library or two, you might be using `/projects`. You could totally put it there if you prefer as well.\n\n### 2. Create a package.json so you can add dependencies\nCreate a package.json for this folder so that it can have its own dependencies independently from the Angular application.\n\n```\ncd server\nyarn init\n```\n\nNow add the dependencies the app will need to run on the command line.\n\n```\nyarn add ts-node ts-node-dev tslint typescript express @types/express concurrently\n```\n\n### 2. Create a tsconfig.json file\nWe want a typescript configuration that is independent from the Angular one, so we'll create a new file with:\n\n```\nyarn global add typescript\ntsc --init\n```\n\nAt this point, feel free to play with any TypeScript flags you might want to change (like `strict`).\n\n### 4. Create an Express server with TypeScript\nNext up, we're going to create a server.ts file with a very simple express setup.\n\nserver.ts\n```\n// equivalent of older: const express = require('express')\nimport * as express from 'express';\n\nconst app = express();\n\n// Allow any method from any host and log requests\napp.use((req, res, next) => {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n    res.header('Access-Control-Allow-Methods', 'OPTIONS, GET, POST, PUT, DELETE');\n    if('OPTIONS' === req.method) {\n        res.sendStatus(200);\n    } else {\n        console.log(`${req.ip} ${req.method} ${req.url}`);\n        next();\n    }\n}\n\n// Handle POST requests that come in formatted as JSON\napp.use(express.json())\n\n// A default hello word route\napp.get('/', (req, res) => {\n    res.send({hello: 'world'});\n});\n\n// start our server on port 4201\napp.listen(4201, '127.0.0.1', function() {\n    console.log(\"Server now listening on 4201\");\n});\n```\n\nI like to wire up my server directly into my `package.json`'s `serve` script with the following snippet.\n\n```\n\"scripts\": {\n    ...\n    \"server\": concurrently \\\"ng serve\\\" \\\"server/node_modules/.bin/ts-node-dev server/server.ts\\\"\n}\n```\n\nBy using `concurrently`, whenever I run `yarn serve` I'll get both the backend and front-end spun up and live reloading whenever I make changes to my application. Hurray for having one command to run everything!\n\n### 5. Setup some routes\nNow we can remove the hardcoded `app.get()` that we put in our `server.ts` file and we can create a nested structure of routes. Doing this will keep your `server.ts` manageable and small, giving you more maintainable code.\n\nTo create a route configuration file, I'll make a new `routes.ts` file that will export a router that the main server will use. You can repeat this strategy as many times as you like , creating sub-APIs to any granularity that you would like.\n\nroutes.ts\n```\nimport * as express from 'express';\nexport const routes = express.Router();\n\nroutes.get('/', (req, res) => res.send({hello: 'world'});\nroutes.get('/users', (req, res) => res.send([]);\nroutes.post('/users', (req, res) => res.send({body: req.body});\n```\n\nserver.ts - replacing the app.get() hello world call\n```\n// Put at the top\nimport { routes } from './router'; \n\n// Put after the express.json() call\napp.use('/', routes); \n```\n\n### 6. Integrate my routes into my Angular app\nNow you can use the standard `HttpClient` service from Angular to make requests to our server. For example, if you make a post request to `http://localhost:4201/users/` and it should be echoed back to us.\n\nNow it's time to build out your server with APIs that will actually be useful to you (I'll cover connecting to a DB with this setup in the future), and consuming those APIs from your Angular app.\n\n","date":"2018-06-27","id":"adding-node-typescript-to-angular-app","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fadding-node-typescript-to-angular-app%2Fnode-backend.png?alt=media&token=48da5ca9-6010-4f5b-9933-5e29778f504b","images":{"-LFzdjpDUcLthjowd4pE":{"filename":"node-backend.png","path":"/posts/adding-node-typescript-to-angular-app/node-backend.png"}},"key":"adding-node-typescript-to-angular-app","renderedBody":{"changingThisBreaksApplicationSecurity":"<p>The Angular team continues to recommend <a href=\"https://danluu.com/monorepo/\">Monorepositories</a> as a solution to many common problems that developers encounter building software at scale.</p>\n<p>More than once now, I've needed to build an API layer to give my Angular application access to backend processing, data, and functionality. You can do a lot of this with [Firebase functions])(https://firebase.google.com/docs/functions/), but occasionally you want to take control of the full stack by having your own server.</p>\n<p>I've filmed a video version of this content as well:</p>\n<iframe src=\"https://www.youtube.com/embed/Ad3fj9V7s6A?rel=0\" width=\"420px\" height=\"315px\" frameborder=\"0\" allowfullscreen></iframe>\n<p>I know not everyone will agree with my choices, but hopefully this serves as both a starting point for developers looking to get started with this technique, and as an example for those looking to further adopt TypeScript into their backend architecture.</p>\n<h2>NodeJS with TypeScript</h2>\n<p>There are lots of great ways of configuring technologies like NodeJS, Express, etc, but I wanted to do this in a way that met two important criteria:</p>\n<ul>\n<li>My server must live inside of my Angular application directory and in the same git repository</li>\n<li>My server must be written in and run with TypeScript</li>\n</ul>\n<h2>The Process</h2>\n<p>The process I recommend has 6 steps:</p>\n<ol>\n<li>Create a server folder</li>\n<li>Give it its own dependencies</li>\n<li>Give it its own <code>tsconfig</code></li>\n<li>Create an Express server with TypeScript</li>\n<li>Setup some routes</li>\n<li>Integrate my routes into my Angular app</li>\n</ol>\n<h3>1. Add a folder for your server</h3>\n<p>I like to create a folder right at the root level called <code>/server</code>. This is almost entirely a preference though. I like to treat my server as separately as possible from my client-side code. If you have a relatively complex Angular project with a library or two, you might be using <code>/projects</code>. You could totally put it there if you prefer as well.</p>\n<h3>2. Create a package.json so you can add dependencies</h3>\n<p>Create a package.json for this folder so that it can have its own dependencies independently from the Angular application.</p>\n<pre><code>cd server\nyarn init\n</code></pre>\n<p>Now add the dependencies the app will need to run on the command line.</p>\n<pre><code>yarn add ts-node ts-node-dev tslint typescript express @types/express concurrently\n</code></pre>\n<h3>2. Create a tsconfig.json file</h3>\n<p>We want a typescript configuration that is independent from the Angular one, so we'll create a new file with:</p>\n<pre><code>yarn global add typescript\ntsc --init\n</code></pre>\n<p>At this point, feel free to play with any TypeScript flags you might want to change (like <code>strict</code>).</p>\n<h3>4. Create an Express server with TypeScript</h3>\n<p>Next up, we're going to create a server.ts file with a very simple express setup.</p>\n<p>server.ts</p>\n<pre><code>// equivalent of older: const express = require('express')\nimport * as express from 'express';\n\nconst app = express();\n\n// Allow any method from any host and log requests\napp.use((req, res, next) =&gt; {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n    res.header('Access-Control-Allow-Methods', 'OPTIONS, GET, POST, PUT, DELETE');\n    if('OPTIONS' === req.method) {\n        res.sendStatus(200);\n    } else {\n        console.log(`${req.ip} ${req.method} ${req.url}`);\n        next();\n    }\n}\n\n// Handle POST requests that come in formatted as JSON\napp.use(express.json())\n\n// A default hello word route\napp.get('/', (req, res) =&gt; {\n    res.send({hello: 'world'});\n});\n\n// start our server on port 4201\napp.listen(4201, '127.0.0.1', function() {\n    console.log(\"Server now listening on 4201\");\n});\n</code></pre>\n<p>I like to wire up my server directly into my <code>package.json</code>'s <code>serve</code> script with the following snippet.</p>\n<pre><code>\"scripts\": {\n    ...\n    \"server\": concurrently \\\"ng serve\\\" \\\"server/node_modules/.bin/ts-node-dev server/server.ts\\\"\n}\n</code></pre>\n<p>By using <code>concurrently</code>, whenever I run <code>yarn serve</code> I'll get both the backend and front-end spun up and live reloading whenever I make changes to my application. Hurray for having one command to run everything!</p>\n<h3>5. Setup some routes</h3>\n<p>Now we can remove the hardcoded <code>app.get()</code> that we put in our <code>server.ts</code> file and we can create a nested structure of routes. Doing this will keep your <code>server.ts</code> manageable and small, giving you more maintainable code.</p>\n<p>To create a route configuration file, I'll make a new <code>routes.ts</code> file that will export a router that the main server will use. You can repeat this strategy as many times as you like , creating sub-APIs to any granularity that you would like.</p>\n<p>routes.ts</p>\n<pre><code>import * as express from 'express';\nexport const routes = express.Router();\n\nroutes.get('/', (req, res) =&gt; res.send({hello: 'world'});\nroutes.get('/users', (req, res) =&gt; res.send([]);\nroutes.post('/users', (req, res) =&gt; res.send({body: req.body});\n</code></pre>\n<p>server.ts - replacing the app.get() hello world call</p>\n<pre><code>// Put at the top\nimport { routes } from './router'; \n\n// Put after the express.json() call\napp.use('/', routes); \n</code></pre>\n<h3>6. Integrate my routes into my Angular app</h3>\n<p>Now you can use the standard <code>HttpClient</code> service from Angular to make requests to our server. For example, if you make a post request to <code>http://localhost:4201/users/</code> and it should be echoed back to us.</p>\n<p>Now it's time to build out your server with APIs that will actually be useful to you (I'll cover connecting to a DB with this setup in the future), and consuming those APIs from your Angular app.</p>"},"title":"Adding a Node + Typescript Backend to Your Angular App"},"angular-best-practices-august-2017":{"body":"Another month, another summary of best practices. This month we're back to some of the basics about tooling and IDE configuration, and some reactive programming principles that will set you up for future success.\n\n## Best Practice 1: Use the CLI\n\nToday, the [Angular CLI](https://cli.angular.io/) is the best way to build Angular Applications.  Many developers got started with Angular before the CLI was ready for primetime, but the CLI is awesome for the vast majority of developers, startups, and large enterprise teams.\n\nStarting a new project? Create it with the CLI.\n\nWorking on an existing project? Create a new project with the CLI and then move your existing code into `/src/app/`.\n\n```\nnpm install -g @angular/cli\nng new my-project\n```\n\nThe CLI has scaffolding (aka schematics) tools for creating new projects, and generating new code for you, but these aren't the main benefit. The main benefit of the CLI is the way that it automates the build pipeline for both live development with `ng serve` as well as for production code that you would ship down to browsers with `ng build -prod`\n\n`ng build -prod` is always going to take advantage of as many best practices as the Angular team is able to turn on automatically. This means that this command will get more powerful over time with features like **Service Workers** or **The Angular Optimizer**.\n\n## Best Practice 2: Install John Papa's Vs Code Extension\n[Visual Studio Code](https://code.visualstudio.com/) is an awesome IDE for building Angular apps. One of the biggest favors you can do for yourself is to install [John Papa's Essential Angular Extension Pack](https://johnpapa.net/essential-angular-vs-code-extensions/).\n\nThis makes working with Angular in Visual Studio Code better than ever.\n\nThis pack includes the following awesome tools:\n\n1. **The Angular Language Service** - Provides template-aware and Angular-aware completion and error checking withing your application\n1. **EditorConfig** - Connects VSCode's configuration to your `.editorconfig`  that we generate automatically for you as part of a new CLI project\n1. **Bracket Pair Colorizer** - Instead of standard syntax highlighting, this extension colors brackets, parentheses, and curly braces based on their nested layer. Visual indications of nesting is a huge help when working with complicated code.\n\n## Best Practice 3: Don't Subscribe to Your Observables In Components\nMany developers who are working with Observables for the first time want to `subscribe` and save the data locally somewhere.\n\nThis is usually an antipattern because it forces *you* the developer to manage the lifecycle of components and subscriptions, rather than letting the framework do this for you.\n\nThe better way to do this is to use the `async` pipe within your templates, and let Angular manage the whole thing for you. Let's take a look at some sample code.\n\n**Don't do this:**\n\n```\n...\ntemplate: `\n    {{localData | json}}\n`)\nexport class MyComponent {\n    localData;\n    constructor(http: HttpClient) {\n        http.get('path/to/my/api.json')\n        .subscribe(data => {\n            this.localData = data;\n        });\n    }\n}\n```\n\n**Instead do this**\n\n```\n...\ntemplate: `\n    {{data | async | json}}\n`)\nexport class MyComponent {\n    data;\n    constructor(http: HttpClient) {\n        this.data = http.get('path/to/my/api.json');\n    }\n}\n```\n\nBy keeping the Observable and subscribing via the template, you are avoiding memory leaks because Angular will automatically unsubscribe from the Observable when the component is torn down. This may not seem as important for HTTP, but this is nice for several reasons.\n\nThe Async pipe will cancel HTTP requests if the data is no longer needed, instead of completing, processing, and then doing nothing with it.\n\nThe Async pipe finally means that we can build more performant applications by switching your `ChangeDetectionStrategy` to `OnPush`. When you switch to `OnPush`, many new and improved strategies can trigger the need for change detection, which your manual subscription won't automatically trigger. \n\nHere are a few examples of more advanced Observable strategies:\n\nThe Async pipe means that later if you swap out a simple HTTP call with something more complex like a realtime dataset like Firebase, your template code doesn't need to change.\n\nMany of the features / powers of Observables are lost when you manually subscribe. Observables can be enriched with behavior like retry, startWith (for things like offline caching), or timer-based refreshing.\n\n## Best Practice 4: Don't Forget about SEO and Analytics\nWebsites and applications are powerful because of the way search engines like Google can index them and share your content with the world.\n\nAnalytics products can help you understand your users needs and behaviors.\n\nTo set both of these up, let's include the Google Analytics snippet in our `index.html` and replace the tracking code an removing the initial `pageview` that they include by default.\n\n```\n<script>\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\n  ga('create', 'UA-00000000-0', 'auto');\n\n</script>\n```\n\nNow let's go ahead and add events to our `app.module.ts`.\n\nWe want to listen to all of the router events, figure out when a navigation event has completed successfully (`NavigationEnd`), and update the page title and send an analytics event.\n\nWe're going to use a subscription (oh no!), but it's okay in this context because we're going to have exactly one subscription, and we want it to live and run for the entire lifespan of our application in the browser.\n\nFor SEO, we're going to read the page title from some additional data we're including in our route config.\n\n**app.module.ts**\n\n```\ndeclare var ga;\n...\nRouterModule.forRoot([\n    ...\n    { path: 'bio', component: Bio, data: { title: 'About' } },\n    { path: 'projects', component: Projects, data: { title: 'Projects' } },\n])\n...\nconstructor(router: Router, activatedRoute: ActivatedRoute, title: Title) {\n    router.events.filter(e => e instanceof NavigationEnd).subscribe((event) => {\n        let pageTitle = router.routerState.snapshot.root.children[0].data['title'];\n        if (pageTitle) {\n            title.setTitle(pageTitle);\n        } else if (pageTitle !== false) {\n            title.setTitle('My Default Title');\n        }\n        ga('send', 'pageview', event.urlAfterRedirects);\n    });\n}\n```","date":"2017-08-01","id":"angular-best-practices-august-2017","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fangular-best-practices-august-2017%2FDSC00162-640x427.JPG?alt=media&token=7449a38f-f435-4a00-a3d7-14988c4527ba","images":{"-KqRGpTyZqOMyrg4W-Qo":{"filename":"DSC00162-640x427.JPG","path":"/posts/angular-best-practices-august-2017/DSC00162-640x427.JPG"}},"key":"angular-best-practices-august-2017","title":"Angular Best Practices - August 2017 Edition"},"angular-best-practices-july-2017":{"body":"Building applications that are powerful and portable is relatively straightforward these days. `ng build -prod` in the Angular CLI gets you about 90% of the way there by applying things like AOT, minification, code splitting, etc, but there's more you can do to help your users have a fast, rich experience with your application.\n\nHere are 5 best practices you should think about when using Angular in production. These are based on the conversations I've had with developers over the last couple of months, as well as based on what I see in real world web applications.\n\n## Best Practice 1: Measure!\n\nAs always, my #1 recommendation is going to be to measure your applications for size and performance.\n\n### Understand how much you are shipping\nFirst, check out and understand the JavaScript you are shipping to the browser. The Angular team is working to make Angular smaller to make these goals easier, but as a rule of thumb you can think about uncompressed bundle size as follows:\n\n* **> 1 MiB : (** - Maybe you could lazy load more code, or require fewer dependencies?\n* **> 500 KiB : /** - Angular 4.2.4 itself is around 230 KiB, so this isn't necessarily a easy task. Are there ways for you to at least make your index or home page this small?\n* **< 300KiB : )** - You are doing a lot for your users, but always look for even more ways of improving things.\n\nTypically I recommend [source-map-explorer](https://www.npmjs.com/package/source-map-explorer) and analyzing your JavaScript maps generated from `ng build -prod -sm` (Production build WITH source maps).\n\n### Understand how browsers load your code\nAfter you have made the smallest bundle you can for your users, it will help to measure how browsers really load your application.\n\nYou can do this entirely in Chrome's Dev Tools, but if you are looking for a more independent or consistent analysis, check out [WebPageTest](webpagetest.org). Running your site through WebPageTest, especially using older devices or slower internet connections, can give you insight about the experiences you are shipping to users.\n\nThe site will load your application, show you the waterfall of network requests, show you when the device is CPU bound, and more. There's even an option to run a [Lighthouse](https://developers.google.com/web/tools/lighthouse/) audit as well As you are making improvements to your application, or applying best practices, it can be exciting to watch seconds fall off of your loading time.\n\n\n## Best Practice 2: SSL\nWe now live in a world where every public web application deserves an SSL Certificate, increasing the security of your application, and increasing user trust that the application you are trying to send them hasn't been modified in any way.\n\nFortunately getting SSL certificates are relatively easy (and usually cost-free).\n\nMy some of my favorite ways of getting an SSL Certificate:\n\n* Use Firebase Hosting and click on Hosting->Connect Domain. You point your domain or subdomain at their IPs and they'll automatically provision SSL for your application\n* Use [Let's Encrypt](https://letsencrypt.org/) - They have designed a protocol and clients that work on Windows, Mac, Linux, and across many different servers like `nginx`, `Apache`, `IIS` and many others. Typically you run their client such as `certbot` on your server about every 90 days and they'll automatically provision and install or renew your certificate.\n* Use a host like Heroku who [automatically provision and manages SSL for you](https://devcenter.heroku.com/articles/automated-certificate-management)\n\nSSL is essential to not only for increasing user trust, but from a technical standpoint, many new technologies are being built with SSL as a requirement ([Web Image Capture API](https://developers.google.com/web/updates/2016/12/imagecapture), [HTTP2](https://http2.github.io/faq/), [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API), and many more)\n\n## Best Practice 3: HTTP2\nHTTP 1.x was a great protocol which made the web possible, but it wasn't optimized for the way we write and ship applications in 2017 and beyond, so the standards bodies designed a better protocol.\n\nThis newer protocol has two important differences:\n\n1. Make only a single connection to the server, over which we can request and send multiple files\n2. Allow the server to initiate file downloads based on requests\n\nHTTP2 is a really good idea for developers because it means that even without changing a single line of code, your users will be able to download your files faster, decreasing load time.\n\n`ngingx`, `IIS`, `Apache`, `Firebase`, and more all support HTTP2, although you may need to make sure you are using a recent version, and often you'll need to turn on support for HTTP2 manually.\n\n## Best Practice 4: Server Push\nTo take full advantage of the benefits of HTTP2, you need to configure server push.\n\nServer Push allows web developer to say, \"You requested my index page! You're going to need a few more files to fully load that page\". This means that instead of just sending only the static flat HTML file, you can \"server push\" and initiate transfer of your CSS, JavaScript, Images, or other files that you already knew your users would need to download. \n\nThis doesn't sound like a big deal at first, but it can literally mean cutting seconds off of your load time for your users because they don't need to wait for the index page to be fully loaded, then parsed, in order to initiate the other network requests. If you have a long request chain (index loads css, which loads another css, which loads a font file), this can make an even bigger improvement.\n\n### Configuring HTTP2 Push\nWith Firebase, HTTP2 Push for Angular is relatively straightforward. The Angular CLI is looking at baking full support for server push into the build process for multiple server environments, but I typically just use the following script that I call `generate-http2-push.js` to update my `firebase.json` configuration.\n\n```javascript\nfs = require('fs');\n\nfs.readdir('dist/', (err, files) => {\n    if(!files) {\n        console.log(\"No dist folder found to write to.\");\n        return;\n    }\n    // Ignore some files\n    files = files.filter(file => {\n        if(file.indexOf('favicon') != -1) {\n            return false\n        }\n        if(file.indexOf('index.html') != -1) {\n            return false;\n        }\n        if(fs.lstatSync(`dist/${file}`).isDirectory()) {\n            return false;\n        }\n        if(file.indexOf('.bundle.') != -1 || file.indexOf('.chunk.')) {\n            return true;\n        } else {\n            return false;\n        }\n    })\n    let result = '';\n    for(let file of files) {\n        let type;\n        if(file.substr(-3) == \"css\") {\n            type = 'style';\n        } else {\n            type = 'script';\n        }\n        result += `</${file}>;rel=preload;as=${type},`\n    }\n    updateWith(result);\n})\n\nfunction updateWith(result) {\n    fs.readFile('firebase.json', 'utf8', function(err,data) {\n        if(err) {\n            return console.log(err);\n        }\n        let re = /(\\w*\"headers\": \\[{\"key\": \"Link\", \"value\": \")(.*)(\"}\\])/g;\n        if(re.exec(data)) {\n            let newConfig = data.replace(re , `$1${result}$3`);\n            fs.writeFile('firebase.json', newConfig, 'utf8', function(err) {\n                if (err) return console.log(err);\n                console.log(\"firebase.json updated successfully.\");\n            })\n        } else {\n            console.log(\"Couldn't find a valid firebase config to update.\");\n            return;\n        }\n        \n    });\n}\n\n```\n\nNow I realize this uses regular expressions and isn't perfect, and that [Alex Rickabaugh's ng-pwa-tools](https://github.com/alxhub/io17) does a much better job of generating this configuration based on the actual routes (including lazy ones) discovered in your application, but this tool gets me started.\n\nOnce I have this script on disk, I'll typically:\n\n```\nng build -prod\ntools/generate-http2-push.js\nfirebase deploy\n```\n\nand save this as a `deploy.sh` command.\n\n## Best Practice 5: Use a loader for web fonts\nI love web fonts, and ever designer I've worked with loves them too. They make a site feel much more modern very quickly.\n\nThe problem with web fonts for developers is that if you install them the way [Google Fonts](https://fonts.google.com/) recommends, you'll actually block the parsing and execution of your JavaScript until *after* the font has loaded, which implies opening another TCP connection, resolving DNS, and a bunch of other very slow asynchronous processes.\n\nThe best answer to this that I have found so far is to use a font loader to take this out of the critical path.\n\nThere's a great tool by Google/Adobe called WebFont loader that I typically download and save as `webfont.js` in my project (and add to my `.angular-cli.json` configuration's static file list). Then I change my `index.html`:\n\n**Before**\n\n```\n<link href=\"https://fonts.googleapis.com/css?family=Montserrat|Roboto+Mono\" rel=\"stylesheet\">\n```\n\n**After**\n\n```\n<script src=\"./webfont.js\"></script>\n<script>\n    WebFont.load({\n        google: {\n            families: ['Montserrat', 'Roboto Mono']\n        }\n    });\n</script>\n```","date":"2017-07-01","id":"angular-best-practices-july-2017","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fangular-best-practices-july-2017%2FScreenshot_20170627_060432-fs8.png?alt=media&token=061ae8de-b63d-49d3-bf1e-38df53b7e41c","images":{"-Knde-o0K0JI7sBy-Fzm":{"filename":"Screenshot_20170627_060432.png","path":"/posts/angular-best-practices-july-2017/Screenshot_20170627_060432.png"},"-Knde0F-vjD6VVAnNfDE":{"filename":"Screenshot_20170627_060432.png","path":"/posts/angular-best-practices-july-2017/Screenshot_20170627_060432.png"}},"key":"angular-best-practices-july-2017","renderedBody":"<p>Building applications that are powerful and portable is relatively straightforward these days. <code>ng build -prod</code> in the Angular CLI gets you about 90% of the way there by applying things like AOT, minification, code splitting, etc, but there's more you can do to help your users have a fast, rich experience with your application.</p>\n<p>Here are 5 best practices you should think about when using Angular in production. These are based on the conversations I've had with developers over the last couple of months, as well as based on what I see in real world web applications.</p>\n<h2>Best Practice 1: Measure!</h2>\n<p>As always, my #1 recommendation is going to be to measure your applications for size and performance.</p>\n<h3>Understand how much you are shipping</h3>\n<p>First, check out and understand the JavaScript you are shipping to the browser. The Angular team is working to make Angular smaller to make these goals easier, but as a rule of thumb you can think about uncompressed bundle size as follows:</p>\n<ul>\n<li><strong>> 1 MiB : (</strong> - Maybe you could lazy load more code, or require fewer dependencies?</li>\n<li><strong>> 500 KiB : /</strong> - Angular 4.2.4 itself is around 230 KiB, so this isn't necessarily a easy task. Are there ways for you to at least make your index or home page this small?</li>\n<li><strong>< 300KiB : )</strong> - You are doing a lot for your users, but always look for even more ways of improving things.</li>\n</ul>\n<p>Typically I recommend <a href=\"https://www.npmjs.com/package/source-map-explorer\">source-map-explorer</a> and analyzing your JavaScript maps generated from <code>ng build -prod -sm</code> (Production build WITH source maps).</p>\n<h3>Understand how browsers load your code</h3>\n<p>After you have made the smallest bundle you can for your users, it will help to measure how browsers really load your application.</p>\n<p>You can do this entirely in Chrome's Dev Tools, but if you are looking for a more independent or consistent analysis, check out <a href=\"webpagetest.org\">WebPageTest</a>. Running your site through WebPageTest, especially using older devices or slower internet connections, can give you insight about the experiences you are shipping to users.</p>\n<p>The site will load your application, show you the waterfall of network requests, show you when the device is CPU bound, and more. There's even an option to run a <a href=\"https://developers.google.com/web/tools/lighthouse/\">Lighthouse</a> audit as well As you are making improvements to your application, or applying best practices, it can be exciting to watch seconds fall off of your loading time.</p>\n<h2>Best Practice 2: SSL</h2>\n<p>We now live in a world where every public web application deserves an SSL Certificate, increasing the security of your application, and increasing user trust that the application you are trying to send them hasn't been modified in any way.</p>\n<p>Fortunately getting SSL certificates are relatively easy (and usually cost-free).</p>\n<p>My some of my favorite ways of getting an SSL Certificate:</p>\n<ul>\n<li>Use Firebase Hosting and click on Hosting-&gt;Connect Domain. You point your domain or subdomain at their IPs and they'll automatically provision SSL for your application</li>\n<li>Use <a href=\"https://letsencrypt.org/\">Let's Encrypt</a> - They have designed a protocol and clients that work on Windows, Mac, Linux, and across many different servers like <code>nginx</code>, <code>Apache</code>, <code>IIS</code> and many others. Typically you run their client such as <code>certbot</code> on your server about every 90 days and they'll automatically provision and install or renew your certificate.</li>\n<li>Use a host like Heroku who <a href=\"https://devcenter.heroku.com/articles/automated-certificate-management\">automatically provision and manages SSL for you</a></li>\n</ul>\n<p>SSL is essential to not only for increasing user trust, but from a technical standpoint, many new technologies are being built with SSL as a requirement (<a href=\"https://developers.google.com/web/updates/2016/12/imagecapture\">Web Image Capture API</a>, <a href=\"https://http2.github.io/faq/\">HTTP2</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\">Service Workers</a>, and many more)</p>\n<h2>Best Practice 3: HTTP2</h2>\n<p>HTTP 1.x was a great protocol which made the web possible, but it wasn't optimized for the way we write and ship applications in 2017 and beyond, so the standards bodies designed a better protocol.</p>\n<p>This newer protocol has two important differences:</p>\n<ol>\n<li>Make only a single connection to the server, over which we can request and send multiple files</li>\n<li>Allow the server to initiate file downloads based on requests</li>\n</ol>\n<p>HTTP2 is a really good idea for developers because it means that even without changing a single line of code, your users will be able to download your files faster, decreasing load time.</p>\n<p><code>ngingx</code>, <code>IIS</code>, <code>Apache</code>, <code>Firebase</code>, and more all support HTTP2, although you may need to make sure you are using a recent version, and often you'll need to turn on support for HTTP2 manually.</p>\n<h2>Best Practice 4: Server Push</h2>\n<p>To take full advantage of the benefits of HTTP2, you need to configure server push.</p>\n<p>Server Push allows web developer to say, \"You requested my index page! You're going to need a few more files to fully load that page\". This means that instead of just sending only the static flat HTML file, you can \"server push\" and initiate transfer of your CSS, JavaScript, Images, or other files that you already knew your users would need to download. </p>\n<p>This doesn't sound like a big deal at first, but it can literally mean cutting seconds off of your load time for your users because they don't need to wait for the index page to be fully loaded, then parsed, in order to initiate the other network requests. If you have a long request chain (index loads css, which loads another css, which loads a font file), this can make an even bigger improvement.</p>\n<h3>Configuring HTTP2 Push</h3>\n<p>With Firebase, HTTP2 Push for Angular is relatively straightforward. The Angular CLI is looking at baking full support for server push into the build process for multiple server environments, but I typically just use the following script that I call <code>generate-http2-push.js</code> to update my <code>firebase.json</code> configuration.</p>\n<pre><code class=\"javascript language-javascript\">fs = require('fs');\n\nfs.readdir('dist/', (err, files) =&gt; {\n    if(!files) {\n        console.log(\"No dist folder found to write to.\");\n        return;\n    }\n    // Ignore some files\n    files = files.filter(file =&gt; {\n        if(file.indexOf('favicon') != -1) {\n            return false\n        }\n        if(file.indexOf('index.html') != -1) {\n            return false;\n        }\n        if(fs.lstatSync(`dist/${file}`).isDirectory()) {\n            return false;\n        }\n        if(file.indexOf('.bundle.') != -1 || file.indexOf('.chunk.')) {\n            return true;\n        } else {\n            return false;\n        }\n    })\n    let result = '';\n    for(let file of files) {\n        let type;\n        if(file.substr(-3) == \"css\") {\n            type = 'style';\n        } else {\n            type = 'script';\n        }\n        result += `&lt;/${file}&gt;;rel=preload;as=${type},`\n    }\n    updateWith(result);\n})\n\nfunction updateWith(result) {\n    fs.readFile('firebase.json', 'utf8', function(err,data) {\n        if(err) {\n            return console.log(err);\n        }\n        let re = /(\\w*\"headers\": \\[{\"key\": \"Link\", \"value\": \")(.*)(\"}\\])/g;\n        if(re.exec(data)) {\n            let newConfig = data.replace(re , `$1${result}$3`);\n            fs.writeFile('firebase.json', newConfig, 'utf8', function(err) {\n                if (err) return console.log(err);\n                console.log(\"firebase.json updated successfully.\");\n            })\n        } else {\n            console.log(\"Couldn't find a valid firebase config to update.\");\n            return;\n        }\n\n    });\n}\n</code></pre>\n<p>Now I realize this uses regular expressions and isn't perfect, and that <a href=\"https://github.com/alxhub/io17\">Alex Rickabaugh's ng-pwa-tools</a> does a much better job of generating this configuration based on the actual routes (including lazy ones) discovered in your application, but this tool gets me started.</p>\n<p>Once I have this script on disk, I'll typically:</p>\n<pre><code>ng build -prod\ntools/generate-http2-push.js\nfirebase deploy\n</code></pre>\n<p>and save this as a <code>deploy.sh</code> command.</p>\n<h2>Best Practice 5: Use a loader for web fonts</h2>\n<p>I love web fonts, and ever designer I've worked with loves them too. They make a site feel much more modern very quickly.</p>\n<p>The problem with web fonts for developers is that if you install them the way <a href=\"https://fonts.google.com/\">Google Fonts</a> recommends, you'll actually block the parsing and execution of your JavaScript until <em>after</em> the font has loaded, which implies opening another TCP connection, resolving DNS, and a bunch of other very slow asynchronous processes.</p>\n<p>The best answer to this that I have found so far is to use a font loader to take this out of the critical path.</p>\n<p>There's a great tool by Google/Adobe called WebFont loader that I typically download and save as <code>webfont.js</code> in my project (and add to my <code>.angular-cli.json</code> configuration's static file list). Then I change my <code>index.html</code>:</p>\n<p><strong>Before</strong></p>\n<pre><code>&lt;link href=\"https://fonts.googleapis.com/css?family=Montserrat|Roboto+Mono\" rel=\"stylesheet\"&gt;\n</code></pre>\n<p><strong>After</strong></p>\n<pre><code>&lt;script src=\"./webfont.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    WebFont.load({\n        google: {\n            families: ['Montserrat', 'Roboto Mono']\n        }\n    });\n&lt;/script&gt;\n</code></pre>","title":"Angular Best Practices - July 2017 Edition"},"angular-is-awesome":{"body":"The Angular team recently released RC5. This release is particularly exciting because with the recent work towards Ahead of Time compilation, many of the dreams the team had about application performance are beginning to come true for developers worldwide.\n\nAngular is at the heart of modern Javascript frameworks.","date":"2016-08-08","id":"angular-is-awesome","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/angular.png?alt=media&token=c237d20d-4790-4d67-80d5-e2c2b007df0f","images":{"-KT2vfm45stbh_DnVlMG":{"filename":"angular.png","path":"/posts/angular-is-awesome/angular.png"},"-KUOkCHN-SiFT3--SlhG":{"filename":"Screen Shot 2016-10-13 at 12.19.42 PM.png","path":"/posts/angular-is-awesome/Screen Shot 2016-10-13 at 12.19.42 PM.png"},"-KUOkI9Yzc_dU1i0DsJZ":{"filename":"Screen Shot 2016-10-14 at 12.27.39 PM.png","path":"/posts/angular-is-awesome/Screen Shot 2016-10-14 at 12.27.39 PM.png"}},"title":"Angular is awesome"},"angular-service-worker":{"body":"Service worker support first landed in Angular over a year ago, but things have dramatically improved since those early days.\n\n## Setting it up\n\nTaking advantage of service workers is as simple as running two commands in any CLI project:\n\n```\nng set apps.0.serviceWorker=true\nnpm install @angular/service-worker\n``` \n\nThese commands will enable and install the service worker into your project. Now any time that you run a production build with `ng build -prod`, the service worker will automatically be added to your project.\n\nTo get some of the basic features of a PWA, that's all you need to do. The service worker in your production build will install itself, and generate a configuration that helps it automatically cache all of the files generated statically as part of your build process.\n\n## Configuring your Service Worker\n\nNow that your application has static file caching and some of the most basic features. Let's look at the other features you can configure.\n\nAll configuration is done in an `ngsw-manifest.json` file in the root of your project. You can create this file with an empty object, and then add features and parameters as you need.\n\nHere's an example of a completed configuration file.\n\n```\n{\n    \"external\": {\n        \"urls\": [\n            {\"url\": \"https://fonts.googleapis.com/css?family=Montserrat|Raleway|Roboto|Roboto+Mono\"},\n            {\"url\": \"https://fonts.gstatic.com/s/montserrat/v10/zhcz-_WihjSQC0oHJ9TCYPk_vArhqVIZ0nv9q090hN8.woff2\"}\n        ]\n    },\n    \"static.ignore\": [\n        \"\\\\.js\\\\.map$\"\n    ],\n    \"static.versioned\": [\n        \"\\\\.[0-9a-z]{20}\\\\.\"\n    ],\n    \"dynamic\": {\n        \"group\": [\n            {\n                \"name\": \"firebase\",\n                \"urls\": {\n                    \"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com\": {\n                        \"match\": \"prefix\"\n                    }\n                },\n                \"cache\": {\n                    \"optimizeFor\":\"performance\",\n                    \"maxAgeMs\": 360000000,\n                    \"maxEntries\": 40,\n                    \"strategy\": \"lru\"\n                }\n            },\n            {\n                \"name\": \"offline\",\n                \"urls\": {\n                    \"https://fluindotio-website-93127.firebaseio.com/posts.json\": { \"match\": \"prefix\"}\n                },\n                \"cache\": {\n                    \"optimizeFor\": \"freshness\",\n                    \"maxAgeMs\": 360000000,\n                    \"maxEntries\": 1,\n                    \"strategy\": \"lru\"\n                }\n            }\n        ]\n        \n    },\n    \"routing\": {\n        \"index\": \"/index.html\",\n        \"routes\": {\n            \"/\": {\n                \"prefix\": false\n            },\n            \"/blog\": {\n                \"prefix\": true\n            },\n            \"/bio\": {\n                \"prefix\": false\n            },\n            \"/talks\": {\n                \"prefix\": false\n            }\n        }\n    }\n}\n```\n\nLet's look at these top level configuration tools one by one starting with the most common. You can infer most of the specific syntax from the above example.\n\n### routing\n\nThe Service Worker must decide which URLs to serve up your index page for. This section means that when a user attempts to access `/my/sub/url`, it knows to serve up your index page from your configuration.\n\nThis is one of the features that you have to configure manually today, but the ng-pwa-tools thare are being integrated into the CLI will take care of this for you in the future.\n\n### externals\n\nThe externals section allows you to instruct the Service Worker to cache files from external sites that are not present as part of the list of files emitted by your webpack build. Often this will be used for things like fonts, data files, and other files you do not serve yourself.\n\n### static.ignore\n\nBy default, the Service Worker caches all of the files emitted from webpack, but you may want to restrict this set. In particular, maybe you don't want to fetch and cache all of your map files, or perhaps some of your content-based image assets.\n\n### static.versioned\n\nThis configuration setting lets the Service Worker know that if the filename matches the given regular expression, then the file can be versioned by filename alone. This is useful if your webpack build generates hashes within the filename, because the Service Worker does not need to fetch or verify that it is the latest version of the file.\n\n### dynamic\nThe last extremely powerful capability of Service Workers is to inform them about how to cache data that is fetched at runtime. By default, files that are fetched at runtime are not cached, but by creating a dynamic cache group, matching files that are fetched by the Service Worker will also be cached. Choosing `optimizeFor` setting of `performance` will always serve from the cache first, and then attempt to cache any updates. Choosing `freshness` means that the Service Worker will attempt to access the file via the network, and if the network fails, then it will serve the cached copy.\n\n## Pulling it all together\nOnce you have setup your `ngsw-manifest.json` file with all of the settings you want, this file will automatically be pulled in whenever you run `ng-build`, and so all of capabilities will automatically start working the next time your users hit your deployed site.\n\nIf you are having trouble understanding what's going on with your service worker, check out `https://<my-domain>/ngsw.log` this is a special URL intercepted by the Service Worker to report its current status.\n\n## Doing more\nThere are lots of other cool things that you should do, but I might recommend waiting until Angular tooling catches up and does these things for you.\n\n* Manage developer and user expectations by automatically updating service workers, or by prompting the user to restart the page with a toast or popup message\n* Automatically generate SW configured routes\n* Delay Service Worker registration until after your application has bootstrapped, so as to not compete for resources with the critical path of page boot\n","date":"2017-06-01","id":"angular-service-worker","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fangular-service-worker%2Fnoun_846284_70C041.svg?alt=media&token=83f7ecdd-fa27-405e-92ca-5f6b5da9f7af","images":{"-KlXGipoAUchatW_8m7O":{"filename":"noun_846284_70C041.svg","path":"/posts/angular-service-worker/noun_846284_70C041.svg"}},"title":"State of the Angular Service Worker"},"aot-your-angular-project":{"body":"AOT is perceived by many to be hard, but it doesn't have to be, if you are using the CLI.\n\nOne of the most important parts of building fast Angular applications is using the Ahead of Time (AOT) compiler. The compiler takes all your CSS and HTML with you Component into an NgComponentFactory, which is the JavaScript Virtual-Machine optimized output that is responsible for doing change detection, expression evaluation, etc at runtime.\n\n##Make it easy\nIf you use the Angular CLI, it's easy to turn AOT on for most Angular projects. At build time, simply:\n\n```bash\nng build --aot --prod\n```\n\nYou can also run this during development, but it's going to be slow.\n\n```bash\nng serve --prod\n```\n\nThis will generate a fully working version of your Angular application in your /dist/ folder. You won't ship the compiler and your application will boot faster than ever.\n\n##A couple limits\nThere are a couple limitations when doing AOT.\n\n* All Component and Module metadata has to be statically resolvable - This means you can't do lookups or evaluate complex methods in your `@Component` and `@NgModule` metadata.\n* Double check your `typescript` version, the CLI has trouble with some versions, try **typescript@2.0.3** \n* Add any dynamically loaded components (aka Components never referenced by your router or templates) to your Module's `entryComponents`.\n","date":"2016-12-28","id":"aot-your-angular-project","image":"https://d2slcw3kip6qmk.cloudfront.net/marketing/blog/aot-compiler-flamegraph-small.png","title":"Easily AOT Angular Projects"},"appmodule-is-not-an-ngmodule":{"body":"If you see the error`AppModule is not an NgModule` when using the Angular CLI, then the solution is most likely to rollback your typescript version:\n\n```bash\nnpm install typescript@2.0.3\n```\n\nVersion 2.0.10 should also work.","date":"2016-12-28","id":"appmodule-is-not-an-ngmodule","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fappmodule-is-not-an-ngmodule%2Fappmodule-is-not-module-fs8.png?alt=media&token=a81c2777-89f4-4d96-8c7b-50578a6c9dd3","images":{"-K_0rpJCdWaGbxWGO-vc":{"filename":"appmodule-is-not-module.png","path":"/posts/appmodule-is-not-an-ngmodule/appmodule-is-not-module.png"}},"key":"appmodule-is-not-an-ngmodule","renderedBody":"<p>If you see the error<code>AppModule is not an NgModule</code> when using the Angular CLI, then the solution is most likely to rollback your typescript version:</p>\n<pre><code class=\"bash language-bash\">npm install typescript@2.0.3\n</code></pre>\n<p>Version 2.0.10 should also work.</p>","title":"AppModule is not an NgModule"},"attack-of-the-async-pipe":{"body":"When building any sort Angular application that has a lot of asynchronous data flows, we sometimes find ourselves writing code that looks like this:\n\n```html\n<div>\n    {{ (data | async)?.parameter }}\n</div>\n```\n\nWe do this because we have some sort of observable that we just want to fetch a single property from each response. This can lead over time to us writing more and more of these:\n\n\n```html\n<div>\n    {{ (data | async)?.parameter }}\n    {{ (data | async)?.otherParam }}\n    {{ (data | async)?.otherParam2 }}\n</div>\n```\n\nThis quickly becomes more and more difficult to write, but it also creates multiple subscriptions on the underlying observable. Fortunately there are a few ways of avoiding this anti-pattern, but they each come with different trade offs and costs.\n\n## Parameter Observables\n\nInstead of having one observable that we repeatedly subscribe to, we could make an observable for each parameter;\n\n```typescript\nparameter = data.map(item => item.parameter);\notherParam = data.map(item => item.otherParam);\notherParam2 = data.map(item => item.otherParam2);\n\n```\n\nPros: \n\n* This works well when there's exactly one copy of this data and gives us a cleaner template.\n\nCons: \n\n* This strategy isn't going to work within an `ngFor`.\n* This doesn't eliminate all of the asyncs\n* We still have multiple subscriptions\n\n\n\n## Smart Components / Dumb Components\nA cleaner way of unrolling this problem is to use what are called Smart and Dumb components, or Presentation and Container Components. To take advantage of this strategy, we will use a parent component to handle the async subscription, and we will provide a child component the static information.\n\nIn the Smart component we have an async pipe.\n\n```html\n<data-view [data]=\"data | async\"></data>\n```\n\nIn the Dumb component we take the data in as an`@Input` property, and then we can refer to all of the parameters directly.\n\n```html\n<div>\n    {{ data.parameter }}\n    {{ data.otherParam }}\n    {{ data.otherParam2 }}\n</div>\n```\n\nPros:\n\n* Single subscription to data object\n\n\nCons:\n\n* Requires a separation between the stream definition and the rendering, which feels a little bit like the old Angular 1.x Controller and Scope.\n\n\n## Magic Array Pipe\n\nPipes are a very powerful part of Angular. One strategy I've used is to combine the ability for `*ngFor` to iterate over an array with a local variable with our ability to turn anything into an array of one.\n\nTo take advantage of this, we must define a pure pipe that transforms any object it's given into an array:\n\n```typescript\n@Pipe({ name: 'array' })\nexport class ArrayPipe implements PipeTransform {\n    constructor() { }\n\n    transform(value: any, ...args: any[]): any {\n        if (value) {\n            return [value];\n        } else {\n            return [];\n        }\n    }\n}\n```\n\nThis then allows us to do this in our template:\n\n```html\n<div *ngFor=\"let dataPoint of data | async\">\n    {{ dataPoint.parameter }}\n    {{ dataPoint.otherParam }}\n    {{ dataPoint.otherParam2 }}\n```\n\nPros\n\n* This should work whether data is able to resolve or not, which should help handle error cases, like nulls and undefineds\n* You could extend your array pipe to also solve the common problem of iterating over the keys found in maps / objects.\n\nCons:\n\n* Harder to intuit what's going on due to the use of an ng-for\n\n## Coming Soon: *ngIf with local assignment\n\nTake a look at [Misko Hevery's commit](https://github.com/angular/angular/commit/b4db73d) that adds local assignment. \n\n```html\n<div *ngIf=\"userObservable | async; else loading; let user\">\n  Hello {{user.last}}, {{user.first}}!\n</div>\n```\n\nThis technique is probably the cleanest, giving us the best of all worlds. This has landed in Angular's master repository, and will be available in the next major release, expected in February.\n\nPros\n\n* A single subscription regardless of how much data we want\n* Doesn't require manual or controller mapping\n* Will work in an `*ngFor`\n\n","date":"2016-12-20","id":"attack-of-the-async-pipe","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fattack-of-the-async-pipe%2FScreenshot_20161221_001633.png?alt=media&token=6eb9f3a8-3718-441d-8643-7be2deb57fa7","images":{"-KZVSZntRcsnZ_wz2OHO":{"filename":"Screenshot_20161221_001633.png","path":"/posts/attack-of-the-async-pipe/Screenshot_20161221_001633.png"}},"key":"attack-of-the-async-pipe","title":"Attack of the Async Pipe"},"client-side-errors":{"body":"If you are coming from a traditional server-side development tool such as .NET or Java, you are probably used to really good tooling, and direct access to logs and stack traces of what is happening within your application when a user encounters an error. In JavaScript, almost all of our code is run client-side, so we don't have that out of the box.\n\nFortunately, there are a number of really good tools that will catch client-side errors and report them back to a server. This is pretty easy to do yourself, but the tool providers out there make it easier to *understand* what is going on in your errors, and can also apply things like source maps automatically to make the errors more meaningful.\n\nMost of these are paid tools, but here's a list of client-side error catching tools:\n\nProviders\n* [Sentry](https://sentry.io/welcome)\n* OpBeat\n* Bugsnap\n* TrackJS\n\n<post-list limit=\"3\">RERE</post-list> \n","date":"2017-04-28","id":"client-side-errors","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fclient-side-errors%2Fsentry.png?alt=media&token=27f04b19-0993-40a0-96de-351407fb2ec9","images":{"-Kl5_oJNyMgoxRa5SJY5":{"filename":"sentry.png","path":"/posts/client-side-errors/sentry.png"}},"key":"client-side-errors","title":"Catching Client-Side Errors in Production"},"critical-dependency-cannot-be-statically-extracted":{"body":"One of the important steps to consider when adding Angular Elements to your application is to turn off template validation by setting your `schemas` to `CUSTOM_ELEMENTS_SCHEMA` in your application module.\n\nUnfortunately, due to how Visual Studio Code automagically tries to resolve imports, it's very easy to accidentally import the wrong thing, as it provides two options, one of them being incorrect.\n\n![VS Code shows two options for importing, the second one is wrong](https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fcritical-dependency-cannot-be-statically-extracted%2FScreenshot_20180606_050845.png?alt=media&token=4f066cdf-b521-403c-83a8-dbfc73887fc4)\n\nIf you choose the second import, you may end up with a hard to debug warning when running `ng serve` that looks like this:\n\n```\nWARNING in ./node_modules/@angular/compiler/src/core.js\n10:24-31 Critical dependency: require function is used in a way in which dependencies cannot be statically extracted\nâ„¹ ï½¢wdmï½£: Compiled with warnings.\n\n```\n\n## The Fix\nFortunately this issue is relatively easy to fix. Instead of importing from the compiler:\n\n```\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/compiler/src/core';\n```\n\nInstead you should be importing from core:\n\n```\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n```","date":"2018-06-07","id":"critical-dependency-cannot-be-statically-extracted","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fcritical-dependency-cannot-be-statically-extracted%2FScreenshot_20180606_051034.png?alt=media&token=0e683c68-63e8-4d66-9ba6-96f0c7eb87e2","images":{"-LEK-_LP6tzW0BvvsFqT":{"filename":"Screenshot_20180606_050845.png","path":"/posts/critical-dependency-cannot-be-statically-extracted/Screenshot_20180606_050845.png"},"-LEK-b1_QgQAyFdgqy3Q":{"filename":"Screenshot_20180606_051034.png","path":"/posts/critical-dependency-cannot-be-statically-extracted/Screenshot_20180606_051034.png"}},"key":"critical-dependency-cannot-be-statically-extracted","title":"Avoid This Common Angular Elements Problem"},"difference-between-functions-arrow-functions":{"body":"I was asked the difference between a classical `function` and the new modern `arrow function` syntax, but it's a little bit hard to explain without examples, so here's the two major differences.\n\nLet's imagine we have a class called `Data`, and let's imperatively create two functions.\n\n```\nclass Data {\n    saveFunction;\n\n    constructor() {\n        // Classic Function\n        this.saveFunction = function (data) {\n            // save my data\n        }\n        // Arrow Function\n        this.saveFunction = (data) => {\n            // save my data\n        }\n\n    }\n}\n```\n\nThese two look identical, but let's dig into the two major differences.\n\n## Syntax Differences\nSo first of all,  modern one is shorter, hurray! There's even a bunch of shorthand you can use, such as dropping the parentheses when you have only one parameter, and dropping the curly brackets when you want to return the results of a single expression.\n\nThese syntax differences become EXTREMELY useful when you start passing functions around, which happens a lot when we write asynchronous code using Promises, Observables, or even when we need to write callbacks.\n\nConsider the following two implementations. Both are trying to take a list and return the odd numbers.\n\nClassic function style:\n```\n[1,2,3,4,5,6].filter(function(item) {\n  return item % 2;\n}\n```\n\nArrow function style\n```\n[1,2,3,4,5,6].filter(item => item % 2);\n```\n\n\nThe lack of parentheses and the automatic return of the value of the expression really help cut down the length here.\n\nThe brevity increases the clarity of what's going on, once you know how arrow functions work.\n\n## Semantic Differences\nThere's one more important difference, which is that arrow functions and classical functions actually work slightly different. Classic functions create an \"object\" and a scope with its own definition of `this`, whereas [arrow functions don't](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_separate_this).\n\nThis becomes important in our original example, where we were creating functions inside of our Data class. Within classic functions, `this` probably don't refer to the instance you were probably expecting, but arrow functions do.\n\nWe can see this by popping the following code is an ES5 transpiler and looking at the classic JavaScript.\n\n```\nclass Data {\n    saveFunction;\n    currentValue;\n\n    constructor() {\n        // Classic Function\n        this.saveFunction = function (data) {\n            // save my data\n            this.currentValue = {};\n\n        }\n        // Arrow Function\n        this.saveFunction = (data) => {\n            // save my data\n            this.currentValue = {}\n        }\n    }\n}\n```\n\nUsing the transpiler on the [TypeScript Playground](https://www.typescriptlang.org/play/) we get the following ES5:\n\n```\nvar Data = /** @class */ (function () {\n    function Data() {\n        var _this = this;\n        // Classic Function\n        this.saveFunction = function (data) {\n            // save my data\n            this.currentValue = {};\n        };\n        // Arrow Function\n        this.saveFunction = function (data) {\n            // save my data\n            _this.currentValue = {};\n        };\n    }\n    return Data;\n}());\n```\n\nBecause the modern version is using a specifically mapped `_this` that it creates, the call to `this.currentValue` does exactly what we expect, updating the property of the instance. In the classic function , it creates a new property on the function, which is quickly thrown away.","date":"2019-05-19","id":"difference-between-functions-arrow-functions","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fdifference-between-functions-arrow-functions%2Ffucntion-vs.svg?alt=media&token=3c764727-aed0-4f48-b13c-1cdcf7b958e5","images":{"-LfFjH3_IlVuVufF2L3i":{"filename":"fucntion-vs.svg","path":"/posts/difference-between-functions-arrow-functions/fucntion-vs.svg"},"-LfFjYo008gY6LL_JSLB":{"filename":"fucntion-vs.svg","path":"/posts/difference-between-functions-arrow-functions/fucntion-vs.svg"},"-LfFjhNguBeIF6WQUANd":{"filename":"fucntion-vs.svg","path":"/posts/difference-between-functions-arrow-functions/fucntion-vs.svg"}},"renderedBody":{"changingThisBreaksApplicationSecurity":"<p>I was asked the difference between a classical <code>function</code> and the new modern <code>arrow function</code> syntax, but it's a little bit hard to explain without examples, so here's the two major differences.</p>\n<p>Let's imagine we have a class called <code>Data</code>, and let's imperatively create two functions.</p>\n<pre><code>class Data {\n    saveFunction;\n\n    constructor() {\n        // Classic Function\n        this.saveFunction = function (data) {\n            // save my data\n        }\n        // Arrow Function\n        this.saveFunction = (data) =&gt; {\n            // save my data\n        }\n\n    }\n}\n</code></pre>\n<p>These two look identical, but let's dig into the two major differences.</p>\n<h2>Syntax Differences</h2>\n<p>So first of all,  modern one is shorter, hurray! There's even a bunch of shorthand you can use, such as dropping the parentheses when you have only one parameter, and dropping the curly brackets when you want to return the results of a single expression.</p>\n<p>These syntax differences become EXTREMELY useful when you start passing functions around, which happens a lot when we write asynchronous code using Promises, Observables, or even when we need to write callbacks.</p>\n<p>Consider the following two implementations. Both are trying to take a list and return the odd numbers.</p>\n<p>Classic function style:</p>\n<pre><code>[1,2,3,4,5,6].filter(function(item) {\n  return item % 2;\n}\n</code></pre>\n<p>Arrow function style</p>\n<pre><code>[1,2,3,4,5,6].filter(item =&gt; item % 2);\n</code></pre>\n<p>The brevity increases the clarity of what's going on, once you know how arrow functions work.</p>\n<h2>Semantic Differences</h2>\n<p>There's one more important difference, which is that arrow functions and classical functions actually work slightly different. Classic functions create an \"object\" and a scope with its own definition of <code>this</code>, whereas <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_separate_this\">arrow functions don't</a>.</p>\n<p>This becomes important in our original example, where we were creating functions inside of our Data class. Within classic functions, <code>this</code> probably don't refer to the instance you were probably expecting, but arrow functions do.</p>\n<p>We can see this by popping the following code is an ES5 transpiler and looking at the classic JavaScript.</p>\n<pre><code>class Data {\n    saveFunction;\n    currentValue;\n\n    constructor() {\n        // Classic Function\n        this.saveFunction = function (data) {\n            // save my data\n            this.currentValue = {};\n\n        }\n        // Arrow Function\n        this.saveFunction = (data) =&gt; {\n            // save my data\n            this.currentValue = {}\n        }\n    }\n}\n</code></pre>\n<p>Using the transpiler on the <a href=\"https://www.typescriptlang.org/play/\">TypeScript Playground</a> we get the following ES5:</p>\n<pre><code>var Data = /** @class */ (function () {\n    function Data() {\n        var _this = this;\n        // Classic Function\n        this.saveFunction = function (data) {\n            // save my data\n            this.currentValue = {};\n        };\n        // Arrow Function\n        this.saveFunction = function (data) {\n            // save my data\n            _this.currentValue = {};\n        };\n    }\n    return Data;\n}());\n</code></pre>\n<p>Because the modern version is using a specifically mapped <code>_this</code> that it creates, the call to <code>this.currentValue</code> does exactly what we expect, updating the property of the instance. In the classic function , it creates a new property on the function, which is quickly thrown away.</p>"},"title":"The Differences Between function and Arrow Functions"},"google-analytics-with-tag-manager-and-angular":{"body":"In 2018, Google Tag Manager (GTM) became the recommended way to integrate Google Analytics (GA) into a site.  Here's how to integrate the new Tag Manager SDK into your Angular app to track normal page views.\n\n<iframe width=\"592\" height=\"333\" src=\"https://www.youtube.com/embed/3Bx8BU3wxaA\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Assumptions & Setup\nThis tutorial assumes you already have the router installed and configured. We'll be relying on it to get the appropriate events for tracking.\n\n## Step 1 - Setup Analytics Property & Get Tracking ID\nThis isn't an analytics tutorial, but it's pretty easy to visit [analytics.google.com](https://analytics.google.com/analytics/web/#/) and create a new analytics property. The important thing you will need is the tracking ID it gives you.\n\n## Step 2 - Install GTM\nCopy and paste the tracking code into the beginning of your  `head` tag in your index.html. It should look something like this, but make sure to replace *MY_TAG* with something that looks like `UA-23639210-1`.\n\n```\n<!-- Global site tag (gtag.js) - Google Analytics -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=MY_TAG\"></script>\n<script>\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n</script>\n```\n\nAlso note that we removed one line. This line was responsible for submitting the first page load, but we'll let our router do that.\n\nREMOVE THIS LINE:\n```\ngtag('config', 'MY_TAG);\n```\n\n## Step 3 - Track Router NavigationEnd Events\nWe need to let GA know whenever a user makes a client side navigation. This will happen on page load, as well as on upon any navigation event ending. This will ignore intermediate pages and redirects, as well things like guards that might prevent a page from being accessed.\n\nWe need to do this somewhere exactly once in our application, so I always put this code in my root component `app.component.ts`. \n\nLet's add a tool from RxJS to get just the events we care about. I'll let VSCode add the other imports we'll need (`Router` if you don't have it, `NavigationEnd` from router as well).\n\n```\nimport { filter } from 'rxjs/operators';\n\n```\n\nBelow the import statements, let's let the typing system know were going to be using a global variable registered by GTM.\n```\ndeclare var gtag\n```\n\n\nNow let's track the events and let GA know for each event the URL that the user has ended up on.\n\n```\nconstructor(router: Router) {\n  const navEndEvent$ = router.events.pipe(\n    filter(e => e instanceof NavigationEnd)\n  );\n  navEndEvent$.subscribe((e: NavigationEnd) => {\n    gtag('config', 'MY_ID', {'page_path':e.urlAfterRedirects});\n  });\n\n}\n```\n\nWith that we have all of the power of GTM within our Angular app, and you should be seeing each navigation resulting in a call to GA that we can see in the network tab of DevTools. \n\n![analytics events in the Network tab of DevTools](https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fgoogle-analytics-with-tag-manager-and-angular%2FScreenshot%202019-01-17%20at%206.12.51%20PM.png?alt=media&token=6c0c48c2-c86b-4682-a3f2-4ddd6d106f3f)\n----\n\n\n## Bonus Step - Variable Tracking IDs based on environmental variable\nPerhaps you want to track your development environment separately from your production environment? To do this we have to tweak the way we import GTM.\n\nLet's leave some of the config setup in our `index.html`.\n\n```\n<script>\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n</script>\n```\n\nThe rest is moved to our `app.component.ts` constructor. Here we dynamically inject it via an environmental variable from `environment.ts` and `environment.prod.ts`\n\n```\nconst script = document.createElement('script');\n    script.async = true;\n    script.src = 'https://www.googletagmanager.com/gtag/js?id=' + environment.code;\n    document.head.prepend(script);ï»¿\n```\n\nFor this code to work, we need to add a `code` property and import our environment file.  In the `envioronment.ts`file for each of our environments, we add:\n\n```\ncode: 'MY_TRACKING_ID'\n```\n\nFeel free to name the variable something that makes sense and doesn't conflict with your other configuration.\n\n","date":"2019-01-18","id":"google-analytics-with-tag-manager-and-angular","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fgoogle-analytics-with-tag-manager-and-angular%2FScreenshot%202019-01-17%20at%206.07.21%20PM.png?alt=media&token=ad486706-68f0-4eee-89e7-86114604c8ba","images":{"-LWThiO05-36C_2LPESQ":{"filename":"Screenshot 2019-01-17 at 6.07.21 PM.png","path":"/posts/google-analytics-with-tag-manager-and-angular/Screenshot 2019-01-17 at 6.07.21 PM.png"},"-LWTivBFFw4ovcOJgL5J":{"filename":"Screenshot 2019-01-17 at 6.12.51 PM.png","path":"/posts/google-analytics-with-tag-manager-and-angular/Screenshot 2019-01-17 at 6.12.51 PM.png"}},"title":"Google Analytics with Tag Manager and Angular"},"hierarchical-route-animations":{"body":"Angular makes animating visual elements based on state changes easy, and the most recent 4.2 release includes a lot of new features that makes animations even more powerful.\n\nOne of the new powers that is available is the ability to `query` for other sub-elements as part of an animation. This enables many new workflows, but one of the coolest is that ability to animate route transitions.\n\n![Sample Route Animations](https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fhierarchical-route-animations%2Fanimations-23fps.gif?alt=media&token=6f64d92b-88d7-4e3e-90b6-79fe11f4e5a9)\n\n### Assumptions\nI'm going to take an existing application with multiple routes. I'm going to give each route a depth (1, 2, 3), and then animate things sliding in from the right or from the left depending on whether we are descending or ascending the tree.\n\nWhen I go from `/` to `/subpage/`, the subpage should slide in from the right, and the home page will leave to the left.\n\nI could have designed these route animations however I wanted, but I feel like this is an easy to implement, relatively familiar paradigm.\n\n## The Process\n\nTo animate upon route change, we're going to need to follow a 3 step process.\n\n1. Setup CSS\n1. Setup Route Data\n1. Create Animation\n\nI also cover this process in a video demo:\n\n![video demo](https://youtu.be/yPKSpuso6K0)\n\n### Setup CSS\nLet's get back to basics with CSS. We are now about to be rendering two routes simultaneously as siblings of our `<router-outlet>` HTML element in the DOM. If both of these are being shown at the same time, you'll want to make sure that they can be rendered \n\nThe easiest way I have found to do this is to give the parent of my `<router-outlet`> a CSS  class such as `route-container`.\n\n```\n<div class=\"route-container\">\n    <router-outlet></router-outlet>\n</div>\n```\n\nWe can't use this class on the router outlet itself, because remember,  the routed components are added as **peers** of the router outlet.\n\nThen, for this CSS class, let's setup our styles so things render nicely.\n\n```\n.route-container {\n    position:relative;\n}\n.route-container>* {\n    display:block;\n}\n```\n\n### Setup Route Data\nNow let's add the metadata needed to track the depth of a given route manually. I could do this automatically by looking at the path and counting the number of `/`s in it, but I wanted to be more specific with my routes.\n\nFor each route in my application, I'm going to add a data property, with the depth value `{depth: 1}`. So now my routing configuration might look include:\n\n```\n{path: '', component: HomeComponent, data: {depth: 1}},\n{path: 'posts/:id', component: PostComponent, data: {depth: 2}},\n{path: 'posts/:id/details', component: PostDetailComponent, data: {depth: 3}},\n```\n\n### Create The Animation\nLet's attach the animation via our html template. We'll do this in the template that contains our `router-outlet`. We'll make up a name such as `routeAnimation`, and then pass it a state expression which tells us what the current page depth is. In order to figure out the current page and its depth, we'll want to name our router-outlet, and then pass it into the method that determines the state.\n\n```\n<div class=\"route-container\" [@routeAnimation]=\"getDepth(myOutlet)\">\n    <router-outlet #myOutlet=\"outlet\"></router-outlet>\n</div>\n```\n\nWe have referred to a method `getDepth` that doesn't exist yet. Let's add it to the component associated with this template.\n\n```\ngetDepth(outlet) {\n    return outlet.activatedRouteData['depth'];\n}\n```\n\nThe final part of creating the animation is to add our specific transitions to the `routeAnimation`. We do this in our component decorator's `animations` array. (We'll create this because it probably doesn't exist yet). \n\nWe're going to need some extra imports to get access to the methods we'll need.\n\n```\nimport { trigger, transition, group, query, style, animate } from '@angular/animations';\n```\n\nFirst the code, then we'll go through this line by line..\n\n```\nanimations: [\n    trigger('routeAnimation', [\n        transition('1 => 2, 2 => 3', [\n            style({ height: '!' }),\n            query(':enter', style({ transform: 'translateX(100%)' })),\n            query(':enter, :leave', style({ position: 'absolute', top: 0, left: 0, right: 0 })),\n            // animate the leave page away\n            group([\n                query(':leave', [\n                    animate('0.3s cubic-bezier(.35,0,.25,1)', style({ transform: 'translateX(-100%)' })),\n                ]),\n                // and now reveal the enter\n                query(':enter', animate('0.3s cubic-bezier(.35,0,.25,1)', style({ transform: 'translateX(0)' }))),\n            ]),\n        ]),\n        transition('3 => 2, 2 => 1', [\n            style({ height: '!' }),\n            query(':enter', style({ transform: 'translateX(-100%)' })),\n            query(':enter, :leave', style({ position: 'absolute', top: 0, left: 0, right: 0 })),\n            // animate the leave page away\n            group([\n                query(':leave', [\n                    animate('0.3s cubic-bezier(.35,0,.25,1)', style({ transform: 'translateX(100%)' })),\n                ]),\n                // and now reveal the enter\n                query(':enter', animate('0.3s cubic-bezier(.35,0,.25,1)', style({ transform: 'translateX(0)' }))),\n            ]),\n        ]),\n    ])\n]\n```\n\nWe first created an `animations` property in our `@Component` decorator. Inside this we have an array of transitions. Each transition corresponds to a state change, based on the listed states.\n\nWe have two transitions, one for descending the hierarchy of our application, one for ascending, but they function nearly identically.\n\nWithin each transition I have 4 things: a style, two queries, and a group.\n\n#### The Style\nThe style refers to the height of the `.route-container` that holds both of these routes. We style it's height to match the height as it will be after the transition (`!`).\n\n#### First Query\nOur first query moves the incoming route horizontally off of the page so that we don't see it until it has animated onto the page.\n\n#### Second Query\nOur second query ensures that we can take full control of the positioning of both our entering and leaving routes.\n\n#### The Group\nThe final piece, the `group` method, is responsible for the actual animation that happens. Simultaneously, we want our leaving element to leave horizontally, and our entering element to enter horizontally. Each should animate over around 0.3s, using a `cubic bezier` curve in terms of animation speed.\n\nThe animation itself is using the transform attribute and translating its X position to achieve the horizontal movement.\n\n## Summary\nThat's it! We now have the routes of our application labeled with metadata, we have an animation that uses this metadata to trigger transitions, and transition animations defined based on the type of transition.  If we run our app and move between routes, our routes should animate.\n\n### But Why?\nI feel like some people undervalue animations. They are sometimes perceived as unnecessary visual sugar. While you can build a great application without animations, they actually serve a very critical role in communicating to your user.\n\nVery often when we build Single Page Applications, we need some time to load data for the user. Animations give us a few milliseconds to do this sort of data loading, while at the same time giving the user immediate feedback that their intent was received and that their requested data is coming.\n\nAnimations are also critical in the way that they turn interactions into a more effective conversation. Users may know when they are ascending or descending a hierarchy, but visually showing this as they move around in your application confirms this understanding. It makes your application feel more interactive and engaging.\n\n### Extra Notes\nYou will probably want to tweak the height of the animation so that the parent element has the height of the tallest route, regardless of whether it is the source route or destination route. This isn't the easiest thing right now, but you can write a method that [memoizes](https://en.wikipedia.org/wiki/Memoization) the height after each route transition that will get you what you want.\n\nTake a look at [this commit](https://github.com/sjtrimble/fluin.io/commit/87461900e8efd25c1fc46499222e17183e4d4622) for an example. \n\n","date":"2017-07-12","id":"hierarchical-route-animations","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fhierarchical-route-animations%2Froute-animations.jpg?alt=media&token=31963e0a-418c-4ae3-91a3-f14ef9196cae","images":{"-KoiYZMiCMMNvnTO6Gc3":{"filename":"route-animations.jpg","path":"/posts/hierarchical-route-animations/route-animations.jpg"}},"key":"hierarchical-route-animations","title":"Hierarchical Route Animations in Angular"},"html-is-weird":{"body":"I've been struck a few times in the past few months by how truly *weird* HTML is. Perhaps most developers already know this, but coming from an era where HTML used to the wild west, some of this was surprising to me.\n\n##Forget Close Tags##\nYou probably know you don't need to (and shouldn't) close tags like `img` or `input`. Did you know that you don't have to close `div` tags, as long as it's semantically unambiguous? That's right, that wall of `divs` at the end of your page are completely unnecessary.\n\n```html\n      </div>\n    </div>\n  </div>\n</div>\n```\n\nI would still recommend you close all of your tags, even if it is valid standards-compliant HTML. Otherwise it can be very hard to figure out what's going on.\n\n\n##Forget Tags Entirely##\nThere are a few tags that can be omitted completely. In certain circumstances, even the most standard tags such as `html`, `head`, and `body`. \n\nCheck out the [W3C spec on optional tags](https://www.w3.org/TR/2011/WD-html5-20110525/syntax.html#optional-tags) for more.\n\n##Finite Possibilities##\nI'm showing my age through these memories, but gone are the days where constantly there were new HTML tags providing new capabilities. There's now a standard list of HTML elements that all of the browsers agree on. Anything not on this list ends up extending `HTMLUnknownElement`. Each of these tags has a predefined allowable attributes. All of the browsers agree and we don't often see new elements. All of the HTML element innovation has moved into projects like Angular and Custom Elements HTML standards.","date":"2016-10-07","id":"html-is-weird","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fhtml-is-weird%2Fhtml-is-weird.png?alt=media&token=7da93b4b-cf56-4b53-b503-c2d429421290","title":"HTML is Weird"},"my-code-might-be-terrible":{"body":"Sometimes I write bad code.\n\nOkay, let's be honest, I always write bad code. I want to tell you about some of the terrible decisions I make, why I know they are wrong, and why I still do them.\n\n## 1. I would like to use tabs but I use spaces\nLet me start off defending myself by saying that in any codebase I work in, I ALWAYS adhere to the standards and practices of that codebase. Choosing things like tabs vs spaces is in many ways a religious war, and the top priority should be moving the focus past these minor concerns and towards focusing on actual functionality.\n\nWhen developing day to day, I use spaces. If pressed on the reason why, it would probably be because I've watched Silicon Valley showing the prejudice against tab/space diversity, and I've read posts from Stack Overflow that say [developers make more when they use spaces](https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/) and I've seen reports from GitHub that there is more code that uses spaces than tabs.\n\nBut, I don't just use spaces, I use **4** spaces! I find that the extra spacing compared to **2** emphasizes the separation between the various levels that code operates in. Especially when using languages like JavaScript, seeing which calls are asynchronous or the context of a call is *extremely* helpful in understanding what the program is trying to do.\n\nWhen combined with a good line limit (around **120** for me), I find that 4 spaces means that I also don't nest my code as deeply as I might have with 2 spaces, increasing overall code quality.\n\n### But what about tabs?\nDid you know that there's a special character that can be used by developers to semantically indicate the number of levels of depth for a piece of code? It's called `\\t` or the **tab** character.  I love the tab character because it theoretically gives editors the ability to interpret the character in different ways, such as showing a visual spacing equivalent to **2** or **4** spaces (or anything else) as the consumer of code gets to choose.\n\nI know it messes up things like \"perfectly formatted blocks of visual information\", but in general I think most of us agree that you shouldn't have those, and theoretically you could use spaces.\n\nI think if there was broader acceptance and if more IDEs used tabs as a default, I'd probably use tabs more.\n\n**Did you know?** Did you know that most developers who want spaces in their code still use the **tab** key on their keyboard to get them? Ludicrous!\n\n## 2. I Often Don't Build Automated Tests\nAutomated Test in the form of Unit Test and End to End or Integration Test are critical to building a codebase that is maintainable and can survive and adapt over time.\n\nMost of the code I write is small enough to be built and maintained by a single person, or designed to be short lived, so it doesn't have tests. Tests are hugely valuable, but the types of projects I build get more value from innovation and for being able to quickly (and dangerously) refactor than the value created by tests.\n\nIt could also be that I was never required to write tests early in my career, and so I'm just bad at it.\n\n## 3. I start with Bash scripts and end with ts-node scripts\nI never know how long the devops / server management code I write is going to live, but server code always lives longer than you think it will.\n\nThis often results in my bash scripts going through a super predictable path.\n\n1. First, write a 3 line bash script\n1. Then, write 30 more lines of bash\n1. Then, rewrite the script into JavaScript for node\n1. Finally, rewrite the script into TypeScript with `ts-node`\n\nTheoretically I could skip this cycle and just write TypeScript from day one, but that would require me to whip up a `tsconfig.json` file and look up the format, and install extra tools on the server when \"all I want to do it one thing\". ","date":"2017-12-31","id":"my-code-might-be-terrible","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fmy-code-might-be-terrible%2FIMG_20161030_135800.jpg?alt=media&token=993b35b6-4d00-4d4c-99df-48bb5a075fed","images":{"-L1TZZxtX1jsQ4ltrEAy":{"filename":"IMG_20161030_135800.jpg","path":"/posts/my-code-might-be-terrible/IMG_20161030_135800.jpg"}},"key":"my-code-might-be-terrible","title":"My Code Might Be Terrible"},"open-source":{"body":"Open source is a critical part of building software at scale. There will always be more great developers outside your company than inside, regardless of what company you work for.","date":"2016-08-08","id":"open-source","image":"https://opensource.org/files/osi_keyhole_300X300_90ppi_0.png","title":"Open Source"},"perfmatters":{"body":"__#perfmatters__ is a fantastic reminder to developers that the performance of their applications matter to users, and that as a directly result, it should matter directly to their bottom line. Each hundredth of a second of additional waiting time or loading time risks losing customers, visitors, and partners forever. This concept is being understood better and better by the community as they see the impact performance has on conversions.\n\nThere's another side to performance, however, and that is the performance of developers. Most people forget that optimizing for developer productivity can have an impact that is almost as large as that of application performance. Helping to ensure that developers work on the right things in the right way ensures that their talent and knowledge is leveraged for maximum effect.","date":"2016-08-08","id":"perfmatters","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/permatters.jpg?alt=media&token=0c9cea78-6093-4779-9180-26cd1db59a87","title":"#perfmatters"},"property-has-no-initializer-and-is-not-definitely-assigned":{"body":"If you have ever seen an error that looks like `Property 'X' has no initializer and is not definitely assigned in the constructor.`, then you probably just updated your TypeScript version or strictness flags. Here's how to fix it.\n\nOne of the new flags that landed as part of [TypeScript 2.7](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#strict-class-initialization) was the `--strictPropertyInitialization` flag. This flag is also implied by `--strict` so many developers may be seeing this error for the first time.\n\nBefore\n```\nclass C {\n    name: string\n}\n```\n\nIf you are seeing this error, you have two main options for resolving it the right way.\n\n## Option 1 - Initialize the property\nGive the property a value to ensure that it is initialized.\n\nAfter\n```\nclass Person {\n    name = '';\n}\n```\n\nYou can also do this in the constructor like this:\n```\nclass Person {\n    name: string;\n    constructor() {\n        this.name = '';\n    }\n}\n```\n\n## Option 2 - Make the property optional\nIf some instances of your class won't have this property defined, you can let the type system know by making the property optional.\n\n```\nclass Person {\n    name?: string;\n}\n```\n\nBy making one of these two changes, your codebase should be ready for TypeScript 2.7 and above, even in `strict` mode.\n\nThere's a third way, but you shouldn't do this. You can just override the warning by added an `!` instead of a `?`.\n\n## Doing this in an Angular app?\nThis can be trickier for Angular apps using decorators like `@ViewChild` or `@ContentChildren`, your best bet is to make the property optional.\n\nIf you are defining an `Observable`in your `ngOnInit`, look at moving it to your constructor. In general the best practice is to define your streams in your constructor, and then subscribe to them from your template.\n\nIf you are using an `@Input()` decorator, you should provide a default value, or mark the property as optional.\n\nThe best practice for using `@Output()` is to immediately define the `new EventEmitter<type>()`.\n\n","date":"2018-06-26","id":"property-has-no-initializer-and-is-not-definitely-assigned","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fproperty-has-no-initializer-and-is-not-definitely-assigned%2Frado.jpg?alt=media&token=1f6a97d0-a3ab-4b3c-bcd7-a3be0598f462","images":{"-LFxqIv-3SoJJHqKH-XT":{"filename":"rado.jpg","path":"/posts/property-has-no-initializer-and-is-not-definitely-assigned/rado.jpg"}},"renderedBody":{"changingThisBreaksApplicationSecurity":"<p>If you have ever seen an error that looks like <code>Property 'X' has no initializer and is not definitely assigned in the constructor.</code>, then you probably just updated your TypeScript version or strictness flags. Here's how to fix it.</p>\n<p>One of the new flags that landed as part of <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#strict-class-initialization\">TypeScript 2.7</a> was the <code>--strictPropertyInitialization</code> flag. This flag is also implied by <code>--strict</code> so many developers may be seeing this error for the first time.</p>\n<p>Before</p>\n<pre><code>class C {\n    name: string\n}\n</code></pre>\n<p>If you are seeing this error, you have two main options for resolving it the right way.</p>\n<h2>Option 1 - Initialize the property</h2>\n<p>Give the property a value to ensure that it is initialized.</p>\n<p>After</p>\n<pre><code>class Person {\n    name = '';\n}\n</code></pre>\n<p>You can also do this in the constructor like this:</p>\n<pre><code>class Person {\n    name: string;\n    constructor() {\n        this.name = '';\n    }\n}\n</code></pre>\n<h2>Option 2 - Make the property optional</h2>\n<p>If some instances of your class won't have this property defined, you can let the type system know by making the property optional.</p>\n<pre><code>class Person {\n    name?: string;\n}\n</code></pre>\n<p>By making one of these two changes, your codebase should be ready for TypeScript 2.7 and above, even in <code>strict</code> mode.</p>\n<p>There's a third way, but you shouldn't do this. You can just override the warning by added an <code>!</code> instead of a <code>?</code>.</p>\n<h2>Doing this in an Angular app?</h2>\n<p>This can be trickier for Angular apps using decorators like <code>@ViewChild</code> or <code>@ContentChildren</code>, your best bet is to make the property optional.</p>\n<p>If you are defining an <code>Observable</code>in your <code>ngOnInit</code>, look at moving it to your constructor. In general the best practice is to define your streams in your constructor, and then subscribe to them from your template.</p>"},"title":"Property has no initializer and is not definitely assigned"},"should-I-use-the-angular-cli":{"body":"**short answer**: yes\n\n**long answer**: probably\n\nLet me explain a little bit further.\n\n##What is the Angular CLI?\n\nThe Angular CLI is a set of of tools provided by the Angular team to make it easier to use Angular (we're specifically talking about versions 2+ here).\n\nThe CLI starts by *scaffolding* out your project and components, then *runs* your application with a live refresh loop to make development faster, and finally it will help you *build and deploy* your application.\n\nYou can do all of these things yourself, but there's actually quite a bit of setup and configuration involved with building any modern web application. You'd have to touch:\n\n* TypeScript's .tsconfig, tslint.json\n* your IDE's: .editorconfig\n* Git's .gitignore and .gitkeep \n* Protractor's protractor.conf.js\n* Karma's karma.conf.js\n* Node's package.json\n* Webpack / Bundler configuration\n\n**AND** you'd need to start building your own\n\n* App Component, css, html, test\n* App Module\n* Environment Files\n* Index.html\n* main.js\n* Polyfills\n\nBut because you typed `ng new`, the CLI gave you some pretty good defaults out of the box for all of these things.\n\n## So it's faster to get started, where's the catch?\nThe Angular CLI is a bit of a black box. The CLI doesn't give you control of your webpack configuration, it doesn't give you control of what templates / blueprints to use when scaffolding out new components.\n\nThat's basically it.\n\nYou are sacrificing control for ease-of use.\n\nThis should actually be the biggest determining factor for whether or not you use the CLI. Does your project need custom webpack configurations, will you need to pull in additional bundler plugins, or even switch bundlers? Will you need some of the more advanced optimizations of SystemJS or Rollup or Closure Compiler?\n\nIf you think you are going to need any of those things, relying on the CLI's build system won't help you, although you could still use its scaffolding capabilities.\n\n## How will choosing the CLI affect my project's future?\n\nToday the CLI comes in several parts in an effort to increase the re-usability of the CLI.\n\nA great example of this is the `@ngtools/webpack` plugin. This is a WebPack plugin that the CLI uses under the hood. The nice thing about this modular approach is that if you can't use the CLI, you can still leverage all of the work they are doing with regard to **code splitting**, **lazy loading**, **AOT**, and more, as long as you are using webpack. At some point in the future there will likely be more independent packages and tools for developers who want to avoid the CLI.\n\nThis means that even if you wanted to switch away from the CLI at some point in the future, you should still be able to rely on some of these tools. The CLI team is trying to make self-contained tools that make working with Angular easier for all developers.","date":"2016-12-25","id":"should-I-use-the-angular-cli","image":"https://cli.angular.io/images/cli-logo.svg","key":"should-I-use-the-angular-cli","title":"Should I use the Angular CLI?"},"smaller-angular-bundles":{"body":"Building smaller Angular bundles is a big deal. Performance matters to your users, and the speed of your application is heavily based on your bundle size.\n\nHere are the top tips for making smaller bundles:\n\n* Don't import `MaterialModule`, instead pull in any components that you need directly such as `MdButtonModule` or `MdInputModule`.\n* Don't import all of `rxjs`, instead import Observables such as `import { Observable} from 'rxjs/Observable';` and then add any of the operators you need manually `import 'rxjs/add/operator/map';`\n* Lazy load every route in your application\n* Use AOT\n\nDoing this, my hope is that your application's critical path bundles should be 100kb or less when gzipped.","date":"2017-01-20","id":"smaller-angular-bundles","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fsmaller-angular-bundles%2Fzip-file.png?alt=media&token=e4511612-43cb-4b53-9a85-176fc3f6b8d4","images":{"-KaiVpR3Y2UdNMDC6Y0v":{"filename":"zip-file.png","path":"/posts/smaller-angular-bundles/zip-file.png"}},"key":"smaller-angular-bundles","title":"Smaller Angular Bundles"},"state-of-wearables":{"body":"Wearable technology is another window into our digital lives. More and more technology is being built at the services layer. This means that every day, a smaller percent of the technology is being built in front of our eyes.\n\nThis is a bit of a contradiction because only the technology in front of our eyes actually matters, but more of it is being written behind the scenes.\n\nWhether you are interacting with a smart IOT device, your phone, a laptop, or a wearable, you should have the same experience, the same expectations, and the same capabilities. The only thing that should be different is the speed and power with which you can interact.\n\nA voice-only system is __never__ going to be as powerful as something with 2d spacial selection (such as a mouse pointer or a touch screen, or ideally both).","date":"2016-08-08","id":"state-of-wearables","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/glass.jpg?alt=media&token=b2b23736-d725-426d-a32d-92fa2b5f5af2","title":"The State of Wearables"},"the-angular-router-common-tasks":{"body":"The Angular router is one of the first ways that you can take state from the user, and use it to make rendering choices in your application.\n\nTo put it simply, you have a path in the URL bar which the router translates into a set of components to render, and then passes in any parameters to those components.\n\nHere's an example routing config:\n\n```\nexport const routeConfig: Routes = [\n    { path: '', component: HomeComponent, data: { title: 'fluin.io', page: 'home' } },\n    {\n        path: 'blog', data: { title: false, page: 'blog'  }, component: BlogComponent, children: [\n            { path: '', component: BlogPostComponent },\n            { path: ':id', component: BlogPostComponent },\n        ]\n    },\n    { path: 'bio', component: BioComponent, data: { title: 'About Stephen Fluin' } },\n    { path: 'projects', component: ProjectsComponent, data: { title: 'Projects' } },\n    { path: 'admin', loadChildren: 'app/admin/admin.module#AdminModule' },\n    { path: '404', component: NotFoundComponent},\n    { path: '**', component: Send404Component },\n];\n```\n\n## Hierarchy\nYou can nest routes. Nested routes end up being concatenated (e.g. /blog/:32) selects the `blog` path, and renders the BlogPostComponent.\n\nModules and components themselves can nest multiple Router Outlets, resulting in being able to supply a template such as `admin` that can be used for multiple `admin` routes.\n\nThis is most commonly done with `loadChildren` where you point to another module in your application, which then gets split into a separate chunk as part of the build process. This chunk and all of its dependencies are only loaded when you navigate to that route. This means your application gets smaller and faster for your users.\n\n## Navigation Events\nI love tapping into navigation events for several common patterns. Let's take a look at the code in my constructor in my root component.\n\n```\nrouter.events.pipe(filter(e => e instanceof NavigationEnd)).subscribe((n: NavigationEnd) => {\n    let pageTitle = router.routerState.snapshot.root.children[0].data['title'];\n    if (pageTitle) {\n        title.setTitle(pageTitle);\n    } else if (pageTitle !== false) {\n        title.setTitle('fluin.io');\n    }\n    window.scrollTo(0, 0);\n    ga('send', 'pageview', n.urlAfterRedirects);\n});\n```\n\nIn this constructor, I listen for all NavigationEnd events, and then do several things:\n\n1. I set the page title based on the `data.title` from my route configuration.\n1. I scroll the page to the top (hopefully the Angular team will make this smarter and automatic some day)\n1. I send an analytics event to Google Analytics.\n\n\n","date":"2018-02-12","id":"the-angular-router-common-tasks","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fthe-angular-router-common-tasks%2FIMG_20180211_175241.jpg?alt=media&token=e7c1b532-1d9d-42a2-8a5d-21947edd00a0","images":{"-L57LdVtCeFgqSTytEEL":{"filename":"IMG_20180211_175241.jpg","path":"/posts/the-angular-router-common-tasks/IMG_20180211_175241.jpg"}},"key":"the-angular-router-common-tasks","title":"The Angular Router + Common Tasks"},"things-I-wish-I-knew-about-CDK-drag-drop":{"body":"I've been trying to do cool things with the CDK and cdkDragDrop for a while now and the genius behind this library is finally starting to click.\n\nMy first step was to make a simple list work via [the documentation on the Angular Material site](https://material.angular.io/cdk/drag-drop/overview). This code worked just fine but didn't actually meet any of my needs.\n\nNext up, I delved a little deeper via some code provided by the awesome [@joeyperrot](https://twitter.com/joeyperrott), I got [this ridiculously cool drag drop dashboard](https://stackblitz.com/edit/drag-drop-dashboard) up and working on stackblitz.\n\n## 1. I needed **cdkDragDrop**\nI didn't think I needed it, but I was wrong.\n\nI've  used [Dragula](https://github.com/valor-software/ng2-dragula) and even implemented some simple drag and drop using [the underlying primitives](https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API), but  when I wanted to build [my game](https://github.com/stephenfluin/hex-slayer-web/), I started running into problems. \n\nHere's a few of the reasons I ended up choosing the CDK for drag and drop.\n\n### Transparency & Previews\nI've been trying to build a game, and I had little images I wanted users to be able to drag around. When I first implemented this by hand, I discovered that the native drag and drop capabilities move the image to a new layer with opacity 1, losing the transparency in my image. \n\nI did a little searching on how to fix this. To fix the transparency problem, you just clone the item you are dragging, hide the original for the duration of the drag, then match the clone up to the mouse cursor position and update it as the cursor moves. Easy right? Hahahahaha. The CDK does this automatically, meaning my transparent images just started working.\n\n### Snapping\nNext I realized I wanted to show the user where it was valid to place units, so I wanted the preview to snap into my target tiles. The CDK does this by default too.\n\n![my hexagon territory game](https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fthings-I-wish-I-knew-about-CDK-drag-drop%2FScreenshot%202019-01-22%20at%208.48.27%20AM.png?alt=media&token=acf77488-e99e-464a-898c-35373182c7a2)\n\n## 2. It's not just for lists\nThe built-in support for lists is pretty good. When you reorder list elements there are a couple helpful methods that give you the old indexes and the new ones, even between lists. \n\n```\nif (event.previousContainer === event.container) {\n  moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n} else {\n  transferArrayItem(event.previousContainer.data,\n                    event.container.data,\n                    event.previousIndex,\n                    event.currentIndex);\n}\n```\n\nBut if you don't need these methods, the CDK offers all of the underlying primitives in the form of `cdkDrag` and `cdkDropList`. With the combination of these two directives, you can build any type of drag and drop system you could possibly want.\n\n\n## 3. Everything needs to be a **cdkDropList**\nEvery element you want to be draggable or to be a drop target MUST be the child of a cdkDropList.\n\nThe name `DropList` is a little confusing, because it doesn't need to be a list. For example, when I have a game board made up of hexagonal tiles, I made each tile into its own `DropList` so that it can receive drops.\n\nYou should also remember that your `cdkDrag` element must be contained in its own `dropList`. This was a little weird at first, because why would my draggables need to be a dropList if the user isn't dropping things there? \n\nI don't know the full reason but my guess is that if the user action is cancelled, the item needs to be able to return to its origin, so that origin must be a dropList.\n\n## 4. Your **cdkDropLists** need to be connected\nYou can manually do this by providing a `[cdkDropListConnectedTo]=\"[namedList1,namedList2,etc]` on every `cdkDropList`, or you can wrap everything in a single `cdkDropListGroup`.\n\nHere's a super contrived example to show the automatic connections between lists. You should just use a single `cdkDropList` normally.\n\n```\n<ng-container cdkDropListGroup>\n  <div *ngFor=\"let item of items;index as i\" cdkDropList>\n    {{i}}: <div cdkDrag>{{item}}</div>\n  </div>\n</ng-container>\n```\n\n## 5. Your draggables can carry data\nWhen I built my own custom drag and drop in the past, I always made a global variable called something like `carrying` which stored all of the data correlated to an item currently being dragged by a user.\n\nGlobal variables aren't a great way to manage this information, and I would sometimes end up in weird states where I would still be carrying an item even after the user cancelled the action.\n\nBy setting `[cdkDragData]` you can pass any shape of information or objects that will be available to the receiving DropList after the user completes their interaction.\n\n```\n<div *ngFor=\"let pawn of pawns\">\n  <div [cdkDragData]=\"pawn\" cdkDrag>{{pawn.name}}</div>\n</div>\n```\n\n### This approach has better potential\n\nI haven't tried this, but theoretically the CDK could support multi-touch multi-drag with multiple simultaneous elements being dragged around the screen. This is one of the benefits of letting the library handle it instead of you, is that ultimately they can cover more use cases that you don't even know you need before you need them.\n\n## Summary\nI'm not sure why I was so skeptical of the CDK's Drag and Drop capabilities at first, but now having used it more extensively, I have no idea how I lived without it.  Give it a try and [let me know what you think](https://twitter.com/stephenfluin).","date":"2019-01-22","id":"things-I-wish-I-knew-about-CDK-drag-drop","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fthings-I-wish-I-knew-about-CDK-drag-drop%2FScreenshot%202019-01-20%20at%208.34.33%20AM.png?alt=media&token=fef3d82d-38fb-4a0b-9994-5a95f71528a3","images":{"-LWg6Kfp9EEEg1hRzUgX":{"filename":"Screenshot 2019-01-20 at 8.34.33 AM.png","path":"/posts/things-I-wish-I-knew-about-CDK-drag-drop/Screenshot 2019-01-20 at 8.34.33 AM.png"}},"renderedBody":{"changingThisBreaksApplicationSecurity":"<p>I've been trying to do cool things with the CDK and cdkDragDrop for a while now and the genius behind this library is finally starting to click.</p>\n<p>My first step was to make a simple list work via <a href=\"https://material.angular.io/cdk/drag-drop/overview\">the documentation on the Angular Material site</a>. This code worked just fine but didn't actually meet any of my needs.</p>\n<p>Next up, I delved a little deeper via some code provided by the awesome <a href=\"https://twitter.com/joeyperrott\">@joeyperrot</a>, I got <a href=\"https://stackblitz.com/edit/drag-drop-dashboard\">this ridiculously awesome drag drop dashboard</a> up and working on stackblitz.</p>\n<h2>1. I needed <strong>cdkDragDrop</strong></h2>\n<p>I didn't think I needed it, but I was wrong.</p>\n<p>I've  used <a href=\"https://github.com/valor-software/ng2-dragula\">Dragula</a> and even implemented some simple drag and drop using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API\">the underlying primitives</a>, but  when I wanted to build <a href=\"https://github.com/stephenfluin/hex-slayer-web/\">my game</a>, I started running into problems. </p>\n<p>Here's a few of the reasons I ended up choosing the CDK for drag and drop.</p>\n<h3>Transparency &amp; Previews</h3>\n<p>In the game, I had little images I wanted users to be able to drag around. When I first implemented this by hand, I discovered that the native capabilities move the item to another layer with opacity 1, losing the transparency in my image. </p>\n<p>I did a little searching on how to fix this, apparently you just clone the item you are dragging, hide it, then match the clone up to the mouse cursor position. Easy right? Hahahahaha. The CDK does this automatically, meaning my transparent images just worked.</p>\n<h3>Snapping</h3>\n<p>Next I realized I wanted to show the user where it was valid to place units, so I wanted the preview to snap into my target tiles. The CDK does this by default too.</p>\n<h2>2. It's not just for lists</h2>\n<p>The built-in support for lists is pretty good. When you reorder list elements there are a couple helpful methods that give you the old indexes and the new ones, even between lists. </p>\n<pre><code>if (event.previousContainer === event.container) {\n  moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n} else {\n  transferArrayItem(event.previousContainer.data,\n                    event.container.data,\n                    event.previousIndex,\n                    event.currentIndex);\n}\n</code></pre>\n<p>But if you don't need these methods, the CDK offers all of the underlying primitives in the form of <code>cdkDrag</code> and <code>cdkDropList</code>. With the combination of these two directives, you can build any type of drag and drop system you could possibly want.</p>\n<h2>3. Everything needs to be a <strong>cdkDropList</strong></h2>\n<p>Every element you want to be draggable or to be a drop target MUST be the child of a cdkDropList.</p>\n<p>The name <code>DropList</code> is a little confusing, because it doesn't need to be a list. For example, when I have a game board made up of hexagonal tiles, I made each tile into its own <code>DropList</code> so that it can receive drops.</p>\n<p>You should also remember that your <code>cdkDrag</code> element must be contained in its own <code>dropList</code>. This was a little weird at first, because why would my draggables need to be a dropList if the user isn't dropping things there? </p>\n<p>I don't know the full reason but my guess is that if the user action is cancelled, the item needs to be able to return to its origin, so that origin must be a dropList.</p>\n<h2>4. Your <strong>cdkDropLists</strong> need to be connected</h2>\n<p>You can manually do this by providing a <code>[cdkDropListConnectedTo]=\"[namedList1,namedList2,etc]</code> on every <code>cdkDropList</code>, or you can wrap everything in a single <code>cdkDropListGroup</code>.</p>\n<p>Here's a super contrived example to show the automatic connections between lists. You should just use a single <code>cdkDropList</code> normally.</p>\n<pre><code>&lt;ng-container cdkDropListGroup&gt;\n  &lt;div *ngFor=\"let item of items;index as i\" cdkDropList&gt;\n    {{i}}: &lt;div cdkDrag&gt;{{item}}&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/ng-container&gt;\n</code></pre>\n<h2>5. Your draggables can carry data</h2>\n<p>When I built my own custom drag and drop in the past, I always made a global variable called something like <code>carrying</code> which stored all of the data correlated to an item currently being dragged by a user.</p>\n<p>Global variables aren't a great way to manage this information, and I would sometimes end up in weird states where I would still be carrying an item even after the user cancelled the action.</p>\n<p>By setting <code>[cdkDragData]</code> you can pass any shape of information or objects that will be available to the receiving DropList after the user completes their interaction.</p>\n<pre><code>&lt;div *ngFor=\"let pawn of pawns\"&gt;\n  &lt;div [cdkDragData]=\"pawn\" cdkDrag&gt;{{pawn.name}}&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<h3>This approach has better potential</h3>\n<p>I haven't tried this, but theoretically the CDK could support multi-touch multi-drag with multiple simultaneous elements being dragged around the screen. This is one of the benefits of letting the library handle it instead of you, is that ultimately they can cover more use cases that you don't even know you need before you need them.</p>\n<h2>Summary</h2>\n<p>I'm not sure why I was so skeptical of the CDK's Drag and Drop capabilities at first, but now having used it more extensively, I have no idea how I lived without it.  Give it a try and <a href=\"https://twitter.com/stephenfluin\">let me know what you think</a>.</p>"},"title":"5 Things I wish I knew about the CDK's Drag & Drop"},"tips-for-meetup-organizers":{"body":"Organizing a meetup can be challenging, but it can also be one of the most rewarding things that you can do. Building a community is one of the hardest things to master, but it's also one of the most valuable skills, and it's one part of the story of how I ended up at [Google](https://www.linkedin.com/in/stephenfluin). \n\nNow in my role on the Angular team, I get a chance to give back by helping community organizers and meetup leads with advice and suggestions.\n\n## Things to Know\nMeetups happen at the intersection of 3 simple ideas:\n\n* Attendees\n* Hosts\n* Speakers\n\nThe best speakers give presentations because they have a passion that they want to share. Attendees show up because of great content from speakers (among other benefits). Hosts often take the form of sponsors who want to increase their own staff's knowledge, increase their visibility in the community, or to find new employees and customers.\n\nStart with great content and everything else will follow. \n\n## Top 7 Tips\n\nMeetups can be of any size or shape, but there's a few things I've learned from running and working with meetup organizers. Here are my top 7 tips for running a successful meetup.\n\n### Meet on the same day every month\nPick a schedule and stick to it. Do you meet on the first Tuesday of the month? Great.  By having a standardized schedule and reliable cadence that happens month after month, your attendees can become familiar with it, plan ahead. When you do this right, you'll make attending the default for your attendees, and take it out of the realm of a decision each time you schedule a meeting whether or not they can come.\n\n### Get to know your attendees\nThe best meetups are run by people who are as passionate as the rest of the attendees and who find speakers they would love to hear from.\n\nTalk to your attendees, figure out what they are passionate about and share that passion. You'll most often find that your future co-organizers and speakers start as attendees at your meetup.\n \n### Don't be afraid to ask\nNo matter what topics you are exploring, you probably have a few people you admire or look up to. They might already be your favorite speakers or they might have some new perspective or ideas. \n\nNo matter who these people are, stop being afraid and ask them to join your group and share their knowledge! Depending on their calendar and profile, they will probably say no but they might say yes.\n\n### Don't forget to market\nIt can feel weird calling it *marketing*, but you need to get the word out about your meetups. You can do this via traditional social media, by emailing your colleagues or friends. \n\nThe world is full of information and requests and demands for people's time, and the only way your future attendees are going to figure out there's an awesome event happening that they want to attend is if you tell them.\n\nYou also shouldn't be afraid to talk to other meetups, as they may want to share related content with their attendees. Don't think of other meetups as competition, think of them as partners that have the same end goals as you and look for ways to cooperate. For technology meetups, there are often opportunities to partner with [GDGs](https://developers.google.com/programs/community/gdg/directory/).\n\nFinally, having an email list can actually be one of the best ways to get out the word about what's going on at your upcoming meetups, and in the community.\n\n### Take 2 minutes to connect recruiters to job seekers\nFor most meetups, there is a good mixture of personal and professional passion. When that's the case, it can be helpful to include recruiters in targeted ways.\n\nI've seen a few meetups where at the beginning of the meetup they take a minute to ask \"everyone who is looking for a job, raise your hand\" followed by \"everyone who is hiring, raise your hand\". This small interaction doesn't take too much time away from the content, but can serve to create helpful introductions.\n\nRecruiters provide a valuable service, but don't let them monopolize the meeting. They can often connect you to speakers, or even act as hosts, but make sure the content that the attendees are looking for is still the focus.\n\n### Reach out to GDEs\nGoogle has a fantastic network of individuals certified in a number of different domains (such as the [Angular GDEs](https://developers.google.com/experts/all/technology/angular)). If you are looking for speakers, ask one of them! They are all talented and connected individuals who are often happy to help.\n\n### Join the meta-community\nNow that you are a meetup organizer, did you know there are meetups just for meetup organizers? In the Angular universe, there are groups like [ngCommunity](https://twitter.com/ngcommunity) led by [Maxim Salnikov](https://twitter.com/webmaxru) that share best practices like these, and can provide a community that understands the challenges and opportunities that face you.\n\n\n--\n\n\nHopefully this list reminded you of a thing or two that might help improve your meetup, or make you more confident in taking on the challenge of becoming a community leader. As with many things in life, the hardest part is just deciding to do it, so get out there!\n","date":"2017-12-27","id":"tips-for-meetup-organizers","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Ftips-for-meetup-organizers%2Fmeetups.jpg?alt=media&token=50e4a217-4bd6-4b88-896e-6fee8d3cc1f0","images":{"-L1Ly_EZPdecaI4m3vQu":{"filename":"MVIMG_20171206_194410.jpg","path":"/posts/tips-for-meetup-organizers/MVIMG_20171206_194410.jpg"}},"key":"tips-for-meetup-organizers","renderedBody":{"changingThisBreaksApplicationSecurity":"<p>Organizing a meetup can be challenging, but it can also be one of the most rewarding things that you can do. Building a community is one of the hardest things to master, but it's also one of the most valuable skills, and it's one part of the story of how I ended up at <a href=\"https://www.linkedin.com/in/stephenfluin\">Google</a>. </p>\n<p>Now in my role on the Angular team, I get a chance to give back by helping community organizers and meetup leads with advice and suggestions.</p>\n<h2>Things to Know</h2>\n<p>Meetups happen at the intersection of 3 simple ideas:</p>\n<ul>\n<li>Attendees</li>\n<li>Hosts</li>\n<li>Speakers</li>\n</ul>\n<p>The best speakers give presentations because they have a passion that they want to share. Attendees show up because of great content from speakers (among other benefits). Hosts often take the form of sponsors who want to increase their own staff's knowledge, increase their visibility in the community, or to find new employees and customers.</p>\n<p>Start with great content and everything else will follow. </p>\n<h2>Top 7 Tips</h2>\n<p>Meetups can be of any size or shape, but there's a few things I've learned from running and working with meetup organizers. Here are my top 7 tips for running a successful meetup.</p>\n<h3>Meet on the same day every month</h3>\n<p>Pick a schedule and stick to it. Do you meet on the first Tuesday of the month? Great.  By having a standardized schedule and reliable cadence that happens month after month, your attendees can become familiar with it, plan ahead. When you do this right, you'll make attending the default for your attendees, and take it out of the realm of a decision each time you schedule a meeting whether or not they can come.</p>\n<h3>Get to know your attendees</h3>\n<p>The best meetups are run by people who are as passionate as the rest of the attendees and who find speakers they would love to hear from.</p>\n<p>Talk to your attendees, figure out what they are passionate about and share that passion. You'll most often find that your future co-organizers and speakers start as attendees at your meetup.</p>\n<h3>Don't be afraid to ask</h3>\n<p>No matter what topics you are exploring, you probably have a few people you admire or look up to. They might already be your favorite speakers or they might have some new perspective or ideas. </p>\n<p>No matter who these people are, stop being afraid and ask them to join your group and share their knowledge! Depending on their calendar and profile, they will probably say no but they might say yes.</p>\n<h3>Don't forget to market</h3>\n<p>It can feel weird calling it <em>marketing</em>, but you need to get the word out about your meetups. You can do this via traditional social media, by emailing your colleagues or friends. </p>\n<p>The world is full of information and requests and demands for people's time, and the only way your future attendees are going to figure out there's an awesome event happening that they want to attend is if you tell them.</p>\n<p>You also shouldn't be afraid to talk to other meetups, as they may want to share related content with their attendees. Don't think of other meetups as competition, think of them as partners that have the same end goals as you and look for ways to cooperate. For technology meetups, there are often opportunities to partner with <a href=\"https://developers.google.com/programs/community/gdg/directory/\">GDGs</a>.</p>\n<p>Finally, having an email list can actually be one of the best ways to get out the word about what's going on at your upcoming meetups, and in the community.</p>\n<h3>Take 2 minutes to connect recruiters to job seekers</h3>\n<p>For most meetups, there is a good mixture of personal and professional passion. When that's the case, it can be helpful to include recruiters in targeted ways.</p>\n<p>I've seen a few meetups where at the beginning of the meetup they take a minute to ask \"everyone who is looking for a job, raise your hand\" followed by \"everyone who is hiring, raise your hand\". This small interaction doesn't take too much time away from the content, but can serve to create helpful introductions.</p>\n<p>Recruiters provide a valuable service, but don't let them monopolize the meeting. They can often connect you to speakers, or even act as hosts, but make sure the content that the attendees are looking for is still the focus.</p>\n<h3>Reach out to GDEs</h3>\n<p>Google has a fantastic network of individuals certified in a number of different domains (such as the <a href=\"https://developers.google.com/experts/all/technology/angular\">Angular GDEs</a>). If you are looking for speakers, ask one of them! They are all talented and connected individuals who are often happy to help.</p>\n<h3>Join the meta-community</h3>\n<p>Now that you are a meetup organizer, did you know there are meetups just for meetup organizers? In the Angular universe, there are groups like <a href=\"https://twitter.com/ngcommunity\">ngCommunity</a> led by <a href=\"https://twitter.com/webmaxru\">Maxim Salnikov</a> that share best practices like these, and can provide a community that understands the challenges and opportunities that face you.</p>\n<p>--</p>\n<p>Hopefully this list reminded you of a thing or two that might help improve your meetup, or make you more confident in taking on the challenge of becoming a community leader. As with many things in life, the hardest part is just deciding to do it, so get out there!</p>"},"title":"Top 7 Tips for Meetup Organizers"},"top-5-angular-terms":{"body":"There's a lot of jargon in software development, but we develop language around new concepts as an important abstraction layer for improving the speed and efficacy of communication. This is great if you are in-the-know, but when you are new to a technology, this can be very frustrating.\n\nHere are the 5 terms you should know if you want to become an Angular developer.\n\n## TypeScript\nTypeScript IS NOT another new language you need to learn. TypeScript is two things. \n\nFirst, it's an extension to the latest version of the JavaScript language that includes all of the newest and best features of JavaScript, and it's a few additions to the syntax that lets you declare types for things like functions, parameters, and variables. \n\nSecond, TypeScript is a compiler that let's you write code using types and the latest features of JavaScript (classes, ES2015 Arrow functions, etc) while still being able to ship ES5 down to the browser so your code works regardless of the JavaScript support of your users browser.\n\n## NgModule\nAn NgModule is an architectural building block for Angular applications. NgModules define a compilation context for a piece of your application.\n\nIn general, they look something like this:\n```\n@NgModule({\n  imports: [\n    CommonModule\n    HttpClientModule\n  ],\n  declarations: [\n    MyComponent,\n    MyOtherComponent,\n  ]\n})\nexport class MyModule {}\n```\n\nIn this example, we are defining a compilation context for all of the declared components, meaning that we compile those components, the Angular compiler will use the other declarations, and all of the imports. In this module, I could have a component called `<my-component>` and then I could use the same `<my-component>` selector in another module and refer to a different component. Developers always know the full context (such as how the selectors resolve) by looking at the imports and declarations of the module.\n\nAn additional tidbit about NgModules, is that they are standalone, and they can actually be compiled independently from the rest of your applications, speeding up build time.\n\n## Lazy Load\nOnce you have your application architected into a set of modules, it's important to be aware of how much code you are sending down to users on initial load, and upon further interactions. By using the Angular Router, you can decide that certain routes should be Lazy Loaded. This means that the `NgModule` associated with a route shouldn't be downloaded by the browser until the router has determined that the user has requested this route.\n\nBy minimizing the amount of code you send for any given route, you can dramatically increase the speed and decrease the initial load time for even the largest applications.\n\nTo lazy load with Angular, you need to have a Route configuration in both the parent module, and in the child. If I wanted to have a `StatisticsModule` that was loaded when the user navigated to `/statistics`, I could do it as follows:\n\nIn the parent module:\n```\nimport: [\n  ...,\n  RouterModule.forRoot([\n    ...,\n    { path: 'statistics', loadChildren: './statistics/statistics.module#StatisticsModule' },\n  ])\n]\n```\n\nIn the `StatisticsModule`\n```\nimport: [\n  ...,\n  RouterModule.forChild([\n    ...,\n    { path: '', component: StatisticsComponent },\n  ])\n]\n```\n\n\n## Change Detection\nBoth Angular and AngularJS have always had an incredible power to the declarative syntax. Being able to declaratively say \"take the contents of this variable and render it here\" combined with \"take this property or input\" is magical.\n\nThis means that we can simply write:\n```\nHello {{name}}\n<input [(ngModel)]=\"name\">\n```\n\nUnder the covers of Angular we take this simple HTML snippet and listen to all of the appropriate events on the input field, and write all of the appropriate DOM update code to keep these two things in sync.\n\nThis process is called Change Detection, and it's run automatically by Angular and Zones whenever an appropriate event fires. This could be from an async call to a web server, or based on user input, or a number of other events.\n\nChange Detection in Angular happens via a single pass of your application for each CD event. Change Detection is not allowed to have side effects, and to help ensure this, in development mode Angular runs change detection twice and will warn you if any expressions evaluate differently on the first and second pass.\n\nThis process is a lot more efficient (more than 10x) than what existing in AngularJS, making Angular a fantastic choice for its runtime performance.\n\n## Angular\nYou've heard about Angular, you probably know a lot about Angular, but what is it?\n\nAngular is the term for the platform that includes the framework at the core, libraries like Angular Material, projects like AngularFire, and a giant community of community contributed libraries, tutorials, and projects.\n\nAngular has major releases every 6 months or so. The team is currently on v4 as of September 2017, but soon they'll release v5, and it will still just be \"Angular\", no number needed because the changes are incremental and not revolutionary.","date":"2017-09-20","id":"top-5-angular-terms","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Ftop-5-angular-terms%2Fnoun_134472_70C041.png?alt=media&token=9bb7dfd9-029c-48d7-9d1a-0d2f74722f05","images":{"-KuQ27rxqkYkfrLnaMFz":{"filename":"noun_134472_014e58.png","path":"/posts/top-5-angular-terms/noun_134472_014e58.png"}},"key":"top-5-angular-terms","renderedBody":{"changingThisBreaksApplicationSecurity":"<p>There's a lot of jargon in software development, but we develop language around new concepts as an important abstraction layer for improving the speed and efficacy of communication. This is great if you are in-the-know, but when you are new to a technology, this can be very frustrating.</p>\n<p>Here are the 5 terms you should know if you want to become an Angular developer.</p>\n<h2>TypeScript</h2>\n<p>TypeScript IS NOT another new language you need to learn. TypeScript is two things. </p>\n<p>FIrst, it's an extension to the latest version of the JavaScript language that includes all of the newest and best features of JavaScript, and it's a few additions to the syntax that lets you declare types for things like functions, parameters, and variables. </p>\n<p>Second, TypeScript is a compiler that let's you write code using types and the latest features of JavaScript (classes, ES2015 Arrow functions, etc) while still being able to ship ES5 down to the browser so your code works regardless of the JavaScript support of your users browser.</p>\n<h2>NgModule</h2>\n<p>An NgModule is an architectural building block for Angular applications. NgModules define a compilation context for a piece of your application.</p>\n<p>In general, they look something like this:</p>\n<pre><code>@NgModule({\n  imports: [\n    CommonModule\n    HttpClientModule\n  ],\n  declarations: [\n    MyComponent,\n    MyOtherComponent,\n  ]\n})\nexport class MyModule {}\n</code></pre>\n<p>In this example, we are defining a compilation context for all of the declared components, meaning that we compile those components, the Angular compiler will use the other declarations, and all of the imports. In this module, I could have a component called <code>&lt;my-component&gt;</code> and then I could use the same <code>&lt;my-component&gt;</code> selector in another module and refer to a different component. Developers always know the full context (such as how the selectors resolve) by looking at the imports and declarations of the module.</p>\n<p>An additional tidbit about NgModules, is that they are standalone, and they can actually be compiled independently from the rest of your applications, speeding up build time.</p>\n<h2>Lazy Load</h2>\n<p>Once you have your application architected into a set of modules, it's important to be aware of how much code you are sending down to users on initial load, and upon further interactions. By using the Angular Router, you can decide that certain routes should be Lazy Loaded. This means that the <code>NgModule</code> associated with a route shouldn't be downloaded by the browser until the router has determined that the user has requested this route.</p>\n<p>By minimizing the amount of code you send for any given route, you can dramatically increase the speed and decrease the initial load time for even the largest applications.</p>\n<p>To lazy load with Angular, you need to have a Route configuration in both the parent module, and in the child. If I wanted to have a <code>StatisticsModule</code> that was loaded when the user navigated to <code>/statistics</code>, I could do it as follows:</p>\n<p>In the parent module:</p>\n<pre><code>import: [\n  ...,\n  RouterModule.forRoot([\n    ...,\n    { path: 'statistics', loadChildren: './statistics/statistics.module#StatisticsModule' },\n  ])\n]\n</code></pre>\n<p>In the <code>StatisticsModule</code></p>\n<pre><code>import: [\n  ...,\n  RouterModule.forChild([\n    ...,\n    { path: '', component: StatisticsComponent },\n  ])\n]\n</code></pre>\n<h2>Change Detection</h2>\n<p>Both Angular and AngularJS have always had an incredible power to the declarative syntax. Being able to declaratively say \"take the contents of this variable and render it here\" combined with \"take this property or input\" is magical.</p>\n<p>This means that we can simply write:</p>\n<pre><code>Hello {{name}}\n&lt;input [(ngModel)]=\"name\"&gt;\n</code></pre>\n<p>Under the covers of Angular we take this simple HTML snippet and listen to all of the appropriate events on the input field, and write all of the appropriate DOM update code to keep these two things in sync.</p>\n<p>This process is called Change Detection, and it's run automatically by Angular and Zones whenever an appropriate event fires. This could be from an async call to a web server, or based on user input, or a number of other events.</p>\n<p>Change Detection in Angular happens via a single pass of your application for each CD event. Change Detection is not allowed to have side effects, and to help ensure this, in development mode Angular runs change detection twice and will warn you if any expressions evaluate differently on the first and second pass.</p>\n<p>This process is a lot more efficient (more than 10x) than what existing in AngularJS, making Angular a fantastic choice for its runtime performance.</p>\n<h2>Angular</h2>\n<p>You've heard about Angular, you probably know a lot about Angular, but what is it?</p>\n<p>Angular is the term for the platform that includes the framework at the core, libraries like Angular Material, projects like AngularFire, and a giant community of community contributed libraries, tutorials, and projects.</p>\n<p>Angular has major releases every 6 months or so. The team is currently on v4 as of September 2017, but soon they'll release v5, and it will still just be \"Angular\", no number needed because the changes are incremental and not revolutionary.</p>"},"title":"Top 5 Angular Terms You Should Know"},"two-angular-experiments":{"body":"I've been working on two crazy experiments during the holiday break.\n\n## [Depup for Angular](https://www.npmjs.com/package/depup)\nAngular has a lot of peer dependencies. Managing these things and keeping them all up to date is a nonzero amount of work for developers each week or each month that can often require an in-depth understanding of Angular.\n\nFor me, this often means that I have to update the version numbers and dependencies. I'm kind of sick of typing `npm install --save @angular/{core,common,compiler, ... }`, so the idea is that I take the CLI-recommended set, or the [angular/angular](https://github.com/angular/angular) dependencies and store them with each update so that it's easy to take them and apply them to existing projects.\n\nGithub URL: [https://github.com/StephenFluin/depup-for-angular](https://github.com/StephenFluin/depup-for-angular)\n\n## Angular Inspector\nOne of the questions I'm asked all of the time is, **\"Who is using Angular in Production?\"**. I have a short list of companies that are happy to share, but it would be nice to find a broader set of domains and companies using Angular.\n\nAngular is much harder to detect than Angular 1.x, but if you know what to look for in the loaded sources, or if you are running version 2.3 or later, we can actually detect Angular on a lot of sites. I don't want to be manually checking the sources of every page I visit, so I built modified an existing Chrome extension that I've used for years an added detection for 2.3 and later.\n\nGithub URL: [https://github.com/stephenfluin/angular-inspector](https://github.com/stephenfluin/angular-inspector)\n","date":"2016-12-27","id":"two-angular-experiments","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Ftwo-angular-experiments%2Fdepup-fs8.png?alt=media&token=23b9089f-aaf5-471c-8aa6-e26b3fab2a22","images":{"-KZz11_tWHUCTbWatmmW":{"filename":"depup.png","path":"/posts/two-angular-experiments/depup.png"}},"key":"two-angular-experiments","renderedBody":"<p>I've been working on two crazy experiments during the holiday break.</p>\n<h2><a href=\"https://www.npmjs.com/package/depup\">Depup for Angular</a></h2>\n<p>Angular has a lot of peer dependencies. Managing these things and keeping them all up to date is a nonzero amount of work for developers each week or each month that can often require an in-depth understanding of Angular.</p>\n<p>For me, this often means that I have to update the version numbers and dependencies. I'm kind of sick of typing <code>npm install --save @angular/{core,common,compiler, ... }</code>, so the idea is that I take the CLI-recommended set, or the <a href=\"https://github.com/angular/angular\">angular/angular</a> dependencies and store them with each update so that it's easy to take them and apply them to existing projects.</p>\n<p>Github URL: <a href=\"https://github.com/StephenFluin/depup-for-angular\">https://github.com/StephenFluin/depup-for-angular</a></p>\n<h2>Angular Inspector</h2>\n<p>One of the questions I'm asked all of the time is, <strong>\"Who is using Angular in Production?\"</strong>. I have a short list of companies that are happy to share, but it would be nice to find a broader set of domains and companies using Angular.</p>\n<p>Angular is much harder to detect than Angular 1.x, but if you know what to look for in the loaded sources, or if you are running version 2.3 or later, we can actually detect Angular on a lot of sites. I don't want to be manually checking the sources of every page I visit, so I built modified an existing Chrome extension that I've used for years an added detection for 2.3 and later.</p>\n<p>Github URL: <a href=\"https://github.com/stephenfluin/angular-inspector\">https://github.com/stephenfluin/angular-inspector</a></p>","title":"Two Angular Experiments"},"updating-to-angularfire2-rc":{"body":"AngularFire is an awesome way of connecting the power of Firebase to your Angular application with familiar paradigms. Firebase and AngularFire provide access  tools such as a Realtime Database and centralized authentication management, two of the most common problems that developers face.\n\nThere were several changes introduced as part of the May 2017 Release Candidate (RC) in [4.0.0-rc.0](https://github.com/angular/angularfire2/releases)  designed to improve the speed and performance of AngularFire that change how you use it.\n\n## What Happened? AngularFire split into Feature Modules\nBefore the RC, AngularFire came as a single module with all of the features combined into a single library. This meant that you had to pay the performance and bundle size cost regardless of which Firebase features you were using.\n\n## Step 1: Update You Dependencies\nYou will want to update to the latest version of `angularfire2` and of `firebase`. This is pretty straightforward whether you are using npm or yarn. Here's the yarn command:\n\n```\nyarn add angularfire2@latest firebase@latest\n```\n\n## Step 2: Update your NgModule\nWe need to update the way we import AngularFire and add the module for Database and the module for Auth as well. If you used your NgModule to preconfigure authentication methods & providers, you can't do this anymore. These are now just passed in with your login method.\n\nBefore:\n```\nimport { AngularFireModule } from 'angularfire2';\n...\nimports: [\n    ...\n    AngularFireModule.initializeApp( FIREBASE_CONFIG_OBJECT),\n]\n\n```\n\nAfter:\n```\nimport { AngularFireModule } from 'angularfire2';\nimport { AngularFireDatabaseModule } from 'angularfire2/database';\nimport { AngularFireAuthModule } from 'angularfire2/auth';\n...\nimports: [\n    ...\n    AngularFireModule.initializeApp( FIREBASE_CONFIG_OBJECT),\n    AngularFireDatabaseModule,\n    AngularFireAuthModule,\n]\n\n```\n\n## Step 3: Update your Services\nAnywhere you injected `AngularFire`, you now want to inject `AngularFireDatabase` or `AngularFireAuth` as needed.\n\n`constructor(af: AngularFire) { data = af.db.get('/path') }` becomes `constructor(db: AngularFireDatabase) { data = db.get('/path') }`\n\nand\n\n`constructor(af: AngularFire) { user = af.auth; }` becomes `constructor(auth: AngularFireAuth} { user = auth.authState; }`\n\nAny imports for `FirebaseListObservable` or `FirebaseObjectObservable` have also been moved to `angularfire2/database`.\n\n\n## Step 4: Update your auth method calls\nAlmost everything is the same when it comes to Database access and usage, but a couple of the auth methods have changed.\n\nBefore:\n```\nthis.af.auth.login({\n    provider: AuthProviders.Google,\n    method: AuthMethods.Popup,\n});\n```\n\nAfter:\n```\nimport * as firebase from 'firebase/app';\n...\nthis.auth.auth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n```\n\n\n## Summary\nThat should be it. You should now be running the latest and greatest AngularFire, and only using the Firebase libraries and dependencies where and when you need them in your application.\n\n\n","date":"2017-06-09","id":"updating-to-angularfire2-rc","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fupdating-to-angularfire2-rc%2Ffirebase-256.svg?alt=media&token=c8d7a06e-1104-42e1-8659-1d8cd2afed9e","images":{"-Km2WgT5-THERAfikPDW":{"filename":"touchicon-180.png","path":"/posts/updating-to-angularfire2-rc/touchicon-180.png"}},"key":"updating-to-angularfire2-rc","renderedBody":"<p>AngularFire is an awesome way of connecting the power of Firebase to your Angular application with familiar paradigms. Firebase and AngularFire provide access  tools such as a Realtime Database and centralized authentication management, two of the most common problems that developers face.</p>\n<p>There were several changes introduced as part of the May 2017 Release Candidate (RC) in <a href=\"https://github.com/angular/angularfire2/releases\">4.0.0-rc.0</a>  designed to improve the speed and performance of AngularFire that change how you use it.</p>\n<h2>What Happened? AngularFire split into Feature Modules</h2>\n<p>Before the RC, AngularFire came as a single module with all of the features combined into a single library. This meant that you had to pay the performance and bundle size cost regardless of which Firebase features you were using.</p>\n<h2>Step 1: Update You Dependencies</h2>\n<p>You will want to update to the latest version of <code>angularfire2</code> and of <code>firebase</code>. This is pretty straightforward whether you are using npm or yarn. Here's the yarn command:</p>\n<pre><code>yarn add angularfire2@latest firebase@latest\n</code></pre>\n<h2>Step 2: Update your NgModule</h2>\n<p>We need to update the way we import AngularFire and add the module for Database and the module for Auth as well. If you used your NgModule to preconfigure authentication methods &amp; providers, you can't do this anymore. These are now just passed in with your login method.</p>\n<p>Before:</p>\n<pre><code>import { AngularFireModule } from 'angularfire2';\n...\nimports: [\n    ...\n    AngularFireModule.initializeApp( FIREBASE_CONFIG_OBJECT),\n]\n</code></pre>\n<p>After:</p>\n<pre><code>import { AngularFireModule } from 'angularfire2';\nimport { AngularFireDatabaseModule } from 'angularfire2/database';\nimport { AngularFireAuthModule } from 'angularfire2/auth';\n...\nimports: [\n    ...\n    AngularFireModule.initializeApp( FIREBASE_CONFIG_OBJECT),\n    AngularFireDatabaseModule,\n    AngularFireAuthModule,\n]\n</code></pre>\n<h2>Step 3: Update your Services</h2>\n<p>Anywhere you injected <code>AngularFire</code>, you now want to inject <code>AngularFireDatabase</code> or <code>AngularFireAuth</code> as needed.</p>\n<p><code>constructor(af: AngularFire) { data = af.db.get('/path') }</code> becomes <code>constructor(db: AngularFireDatabase) { data = db.get('/path') }</code></p>\n<p>and</p>\n<p><code>constructor(af: AngularFire) { user = af.auth; }</code> becomes <code>constructor(auth: AngularFireAuth} { user = auth.authState; }</code></p>\n<p>Any imports for <code>FirebaseListObservable</code> or <code>FirebaseObjectObservable</code> have also been moved to <code>angularfire2/database</code>.</p>\n<h2>Step 4: Update your auth method calls</h2>\n<p>Almost everything is the same when it comes to Database access and usage, but a couple of the auth methods have changed.</p>\n<p>Before:</p>\n<pre><code>this.af.auth.login({\n    provider: AuthProviders.Google,\n    method: AuthMethods.Popup,\n});\n</code></pre>\n<p>After:</p>\n<pre><code>import * as firebase from 'firebase/app';\n...\nthis.auth.auth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n</code></pre>\n<h2>Summary</h2>\n<p>That should be it. You should now be running the latest and greatest AngularFire, and only using the Firebase libraries and dependencies where and when you need them in your application.</p>","title":"Updating to AngularFire2 Release Candidate"},"what-does-angular-4-rc1-mean-for-developers":{"body":"What does the latest release of Angular mean for developers?\n\n* **Better Error Checking** - Coming with the latest version of TypeScript means that more errors and mistakes in your application can be found at build-time rather than at runtime\n* **Smaller Bundles** - The size of the code that you ship to the browser should now be significantly smaller (the bigger your app is, the bigger the benefit)\n* **New Features** - New features like the new `*ngIf` syntax should solve some common problems when writing templates\n\n[fluin.io](https://fluin.io) is now running the latest release of Angular. This was an update from 2.4.1 and involved migrating `md-input` elements to `md-input-container` elements, and installing the latest set of dependencies:\n\n`npm install typescript@latest --save --save-exact`\n\n`npm install angularfire2 --save --save-exact`\n\n`npm install @angular/cli --save --save-exact`\n\n`npm install @angular/{common,compiler,compiler-cli,core,forms,http,platform-browser,platform-browser-dynamic,platform-server,router,animations}@next --save --save-exact`\n\nEnjoy your smaller bundles!\n\n![bundle size comparison](https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fwhat-does-angular-4-rc1-mean-for-developers%2FScreenshot_20170228_050305.png?alt=media&token=ddf2b916-802b-4c90-81b0-751cbb1fca54)\n\n","date":"2017-02-27","id":"what-does-angular-4-rc1-mean-for-developers","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fwhat-does-angular-4-rc1-mean-for-developers%2Frc1-400.jpg?alt=media&token=711fd70c-2be2-48d0-934d-85524f9dbaf1","images":{"-Ke-iELBlCxki2VRqZ1g":{"filename":"IMG_20170225_164917.jpg","path":"/posts/what-does-angular-4-rc1-mean-for-me/IMG_20170225_164917.jpg"}},"key":"what-does-angular-4-rc1-mean-for-developers","renderedBody":"<p>What does the latest release of Angular mean for developers?</p>\n<ul>\n<li><strong>Better Error Checking</strong> - Coming with the latest version of TypeScript means that more errors and mistakes in your application can be found at build-time rather than at runtime</li>\n<li><strong>Smaller Bundles</strong> - The size of the code that you ship to the browser should now be significantly smaller (the bigger your app is, the bigger the benefit)</li>\n<li><strong>New Features</strong> - New features like the new <code>*ngIf</code> syntax should solve some common problems when writing templates</li>\n</ul>\n<p><a href=\"https://fluin.io\">fluin.io</a> is now running the latest release of Angular. This was an update from 2.4.1 and involved migrating <code>md-input</code> elements to <code>md-input-container</code> elements, and installing the latest set of dependencies:</p>\n<p><code>npm install typescript@latest --save --save-exact</code></p>\n<p><code>npm install angularfire2 --save --save-exact</code></p>\n<p><code>npm install @angular/cli --save --save-exact</code></p>\n<p><code>npm install @angular/{common,compiler,compiler-cli,core,forms,http,platform-browser,platform-browser-dynamic,platform-server,router,animations}@next --save --save-exact</code></p>\n<p>Enjoy your smaller bundles!</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fwhat-does-angular-4-rc1-mean-for-developers%2FScreenshot_20170228_050305.png?alt=media&token=ddf2b916-802b-4c90-81b0-751cbb1fca54\" alt=\"bundle size comparison\" /></p>","title":"What Does Angular 4.0.0-rc.1 Mean for Developers?"},"whats-in-my-angular-chunks":{"body":"Angular's Lazy Loading is a super powerful feature. By splitting your code into modules, and loading those modules only when needed by the current route, your users get the best of both worlds in terms of a single cohesive application, while only loading the code needed for their current experience.\n\nBut what happens when Angular and the CLI generate one of these lazy loaded chunks? Let's dig into one and find out.\n\nI've built an \"AboutModule\" and an \"AboutComponent\" which is routed to by default with the empthy path.  The code itself is about 1K before compression, and is actually pretty straightforward.\n\nHere's a lazy loaded chunk of JavaScript generated by `ng build -prod`. I've added comments to explain what's going on in each piece.\n\n0.da70.chunk.js\n\n```\n// Wrap my code via webpack and JSONP so that it can be loaded and executed from the server.\nwebpackJsonp([0], {\n  c7AP: function(n, u, l) {\n      \"use strict\";\n      function t(n) {\n          // Here we see my \"about works\" template and the wrapping tag whitespace\n          return r._27(0, [(n()(),\n          r._14(0, null, null, 1, \"p\", [], null, null, null, null, null)), (n()(),\n          r._26(null, [\"\\n  about works!\\n\"])), (n()(),\n          r._26(null, [\"\\n\"]))], null, null)\n      }\n      // Here we see my selector\n      function o(n) {\n          return r._27(0, [(n()(),\n          r._14(0, null, null, 1, \"app-about\", [], null, null, null, t, _)), r._12(114688, null, 0, c, [], null, null)], function(n, u) {\n              n(u, 1, 0)\n          }, null)\n      }\n      // This is an ES Module\n      Object.defineProperty(u, \"__esModule\", {\n          value: !0\n      });\n      var r = l(\"/oeL\")\n        , e = function() {\n          function n() {}\n          return n\n      }()\n        , c = function() {\n          function n() {}\n          return n.prototype.ngOnInit = function() {}\n          ,\n          n.ctorParameters = function() {\n              return []\n          }\n          ,\n          n\n      }()\n      // Set the properties of the Component\n        , i = []\n        , _ = r._11({\n          // View Encapsulation: Emulated\n          encapsulation: 2,\n          // No styles this time (empty array)\n          styles: i,\n          data: {}\n      })\n        , a = r._9(\"app-about\", c, o, {}, {}, [])\n        , f = l(\"qbdv\")\n        , p = l(\"BkNc\")\n        , b = function() {\n          function n() {}\n          return n\n      }();\n      // Here we have my NgModule\n      l.d(u, \"AboutModuleNgFactory\", function() {\n          return s\n      });\n      var s = r._10(e, [], function(n) {\n          // My ngModule imports some things and declares some things\n          return r._23([r._24(512, r.k, r._7, [[8, [a]], [3, r.k], r.E]), r._24(4608, f.i, f.h, [r.A]), r._24(512, f.b, f.b, []), r._24(512, p.l, p.l, [[2, p.q], [2, p.k]]), r._24(512, b, b, []), r._24(512, e, e, []), r._24(1024, p.i, function() {\n              // Here we see my simple routing config\n              return [[{\n                  path: \"\",\n                  component: c\n              }]]\n          }, [])])\n      })\n  }\n});\n```","date":"2017-09-14","id":"whats-in-my-angular-chunks","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fwhats-in-my-angular-chunks%2Fnoun_796773_70C041.png?alt=media&token=f92b1754-f516-4c87-a1cc-180fe1dd9dee","images":{"-KuQ-6WtEE6MzzEk1-Zo":{"filename":"noun_796773_70C041.png","path":"/posts/whats-in-my-angular-chunks/noun_796773_70C041.png"}},"key":"whats-in-my-angular-chunks","title":"What's in My Angular Chunks?"},"wheres-stephen-2017-Q3":{"body":"I'm traveling the world meeting with Developers & Companies about Angular over the next few months. Let me know if you are going to be in one of the following places!\n\n* Sept 5-6, Krakow, Poland - [Google Developer Days Poland](https://developers.google.com/events/gdd-europe/)\n* Sept 27, Atlanta, USA\n* Oct 10-12, Orlando, USA - [AngularMix](https://angularmix.com/) ($100 discount with MIXFLUIN)\n* Nov 7-8, London, England [AngularConnect](https://www.angularconnect.com/)\n","date":"2017-09-01","id":"wheres-stephen-2017-Q3","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fwheres-stephen-2017-Q3%2Fstephen-promo-2017-09-01.jpg?alt=media&token=5358ac6b-c19f-480f-9c1e-81861e3bbcd2","images":{"-Ksy-BGstKlVBg9LeGEh":{"filename":"stephen-promo-2017-09-01.jpg","path":"/posts/wheres-stephen-2017-Q3/stephen-promo-2017-09-01.jpg"}},"title":"Where's Stephen for the rest of 2017?"},"why-I-love-the-angular-community":{"body":"I love the Angular Community, and I'm not ashamed to admit it.\n\nI also happen to be one of the luckiest people on the planet because part of my job is connecting to the community. I didn't actually plan to end up here, but I'm amazed and appreciative every day that I get to share my passion with the world, and get paid for it.\n\n## Who is in \"The Angular Community\"?\nYou are! More specifically, everyone that attends Angular conferences, reads blog posts, tweets, shares ideas with friends, and everyone that just silently builds with Angular (and there are a lot of these!). \n\n![ask for directions](https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fwhy-I-love-the-angular-community%2Fimage-6.jpg?alt=media&token=3e7cc97e-50a5-452f-bec2-9a1a054454d9)\n\nPictured: [Shai Reznik](https://twitter.com/shai_reznik?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor) of [HiRez.io](https://hirez.io/)\n\nModern software development platforms can only be successful by encouraging and growing a community of developers. No matter what company you work for (even Google), there are more smart people outside your company than inside it. \n\nBeing supportive of a community that teaches, trains, mentors, and shares means that a technology like Angular can be thousands or millions of times bigger than the handful of engineers working on it.\n\n## Party Time\nIf you haven't been to an Angular conference, I definitely recommend it. There's something magic about the experience, and the friendships and connections that get made there have a real impact on people's lives and productivity. \n\nAngular events definitely know how to party, but one of the most common responses I hear when I ask what were people's favorite parts of a conference like ng-conf or Angular Connect is what I've come to call \"The Hallway Track\".\n\nThe Hallway Track represents all of the things that go on at a conference that aren't arranged by the organizers. The time you spend talking to exhibitors, speakers, sharing your experiences with your neighbor.\n\n## Everywhere\nAngular communities can be found in [every major city in the planet](https://www.meetup.com/topics/angular/). Basically any time I'm travelling for a meeting or conference, I reach out to the local communities and try to spend as much time as possible talking to developers.\n\nThere's a few awesome communities/events on my list that I keep hearing about but I haven't been able to visit yet:\n* [Angular Medellin](https://www.meetup.com/Angular-Medellin/)\n* [ngVikings](https://ngvikings.org/)\n* [AngularUP](http://angular-up.com/)\n* [ngATL](http://ng-atl.org/)\n\n## Passion\nMany of the community members show so much passion, which combined with their wicked smarts means some really cool tools that continue to change the world every day. There's no way I could list all of the amazing people, but here's a few established and new community members you should make sure you follow.\n\n* [Minko Gechev](https://github.com/mgechev)   \n \n  Minko organizes AngularSF and builds awesome tools that help you [write better code](https://github.com/mgechev/codelyzer) and [understand what's going on in your applications](https://github.com/mgechev/ngrev).\n* [Tracy Lee](https://twitter.com/ladyleet)   \n   \n  Founder of This Dot, organizer of around a [thousand meetup groups](https://www.meetup.com/modernweb/), she has tech and business savvy and knows how to bring people together.\n* [Wassim Chegham]  (https://github.com/manekinekko)\n  \n  Wassim builds [beautiful sites](https://actions.cloud/) with Angular and tries to [fill new holes](https://angular.run/) from his experience with real companies.\n* [Eric Simmons](https://twitter.com/ericsimons40)  \n  \n  Eric teaches developers and co-founded the awesome [StackBlitz](https://stackblitz.com/) which takes you from zero to productive Angular developer in about 6 seconds\n* [Hanyu Xiao](https://twitter.com/xiao_hanyu)  \n  \n  Hanyu is working to statically analyze AngularJS and Angular applications, and as a side effect, he was able to build a tool that will use this semantic understanding of applications to help you [transition your apps to Angular](https://angulardoc.github.io/). \n\n## Positivity\nBeing a developer is hard. We are often asked to justify your choices when there is no clear \"best\" answer. Living on the internet makes this even more difficult because it's extremely easy to get sucked into anonymous \"either or\" battles or \"X vs Y\" conversations which make our work into a zero sum game. A key attribute of the Angular community is its ability to continue to be positive.\n\n![Angular hugs](https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fwhy-I-love-the-angular-community%2Fimage-0.jpg?alt=media&token=9e01cc56-7756-4bd9-a369-bb8f58e2ef7d)\n\nWe can all win. The more we can exhibit respect and the more we do for each other (especially in other communities) the more the state of the industry is going to be advanced. When new ideas are created, proven, and explored, we all benefit. We all want the same things, and realizing that everyone on this planet is on the same side goes a long way towards making this world a place that we all want to live.\n\n## Thank You\nThe Angular team values:\n\n1. Apps that users love to use\n1. Apps that developers love to build\n1. A community where everyone feels welcome\n\nThe community is awesome because YOU are awesome, and so I want to say a huge thank you to everyone. You do great work and inspire me to work harder every day to be there for you.\n","date":"2017-12-04","id":"why-I-love-the-angular-community","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fwhy-I-love-the-angular-community%2Fimage-4.jpg?alt=media&token=8eab1a3a-d53a-4f57-9da7-0975014b5b89","images":{"-L-UNastkERlgRpfEpMF":{"filename":"image-5.jpg","path":"/posts/why-I-love-the-angular-community/image-5.jpg"},"-L-UNeGNaZUedAyjHvBi":{"filename":"image-4.jpg","path":"/posts/why-I-love-the-angular-community/image-4.jpg"},"-L-UNgWWuHNJo2wFBvYN":{"filename":"image-6.jpg","path":"/posts/why-I-love-the-angular-community/image-6.jpg"},"-L-UNiXT4yO-gOx8PYdN":{"filename":"image-0.jpg","path":"/posts/why-I-love-the-angular-community/image-0.jpg"}},"key":"why-I-love-the-angular-community","renderedBody":{"changingThisBreaksApplicationSecurity":"<p>I love the Angular Community, and I'm not ashamed to admit it.</p>\n<p>I also happen to be one of the luckiest people on the planet because part of my job is connecting to the community. I didn't actually plan to end up here, but I'm amazed and appreciative every day that I get to share my passion with the world, and get paid for it.</p>\n<h2>Who is in \"The Angular Community\"?</h2>\n<p>You are! More specifically, everyone that attends Angular conferences, reads blog posts, tweets, shares ideas with friends, and everyone that just silently builds with Angular (and there are a lot of these!). </p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fwhy-I-love-the-angular-community%2Fimage-6.jpg?alt=media&token=3e7cc97e-50a5-452f-bec2-9a1a054454d9\" alt=\"ask for directions\" /></p>\n<p>Modern software development platforms can only be successful by encouraging and growing a community of developers. No matter what company you work for (even Google), there are more smart people outside your company than inside it. </p>\n<p>Being supportive of a community that teaches, trains, mentors, and shares means that a technology like Angular can be thousands or millions of times bigger than the handful of engineers working on it.</p>\n<h2>Party Time</h2>\n<p>If you haven't been to an Angular conference, I definitely recommend it. There's something magic about the experience, and the friendships and connections that get made there have a real impact on people's lives and productivity. </p>\n<p>Angular events definitely know how to party, but one of the most common responses I hear when I ask what were people's favorite parts of a conference like ng-conf or Angular Connect is what I've come to call \"The Hallway Track\".</p>\n<p>The Hallway Track represents all of the things that go on at a conference that aren't arranged by the organizers. The time you spend talking to exhibitors, speakers, sharing your experiences with your neighbor.</p>\n<h2>Everywhere</h2>\n<p>Angular communities can be found in <a href=\"https://www.meetup.com/topics/angular/\">every major city in the planet</a>. Basically any time I'm travelling for a meeting or conference, I reach out to the local communities and try to spend as much time as possible talking to developers.</p>\n<p>There's a few awesome communities/events on my list that I keep hearing about but I haven't been able to visit yet:</p>\n<ul>\n<li><a href=\"https://www.meetup.com/Angular-Medellin/\">Angular Medellin</a></li>\n<li><a href=\"https://ngvikings.org/\">ngVikings</a></li>\n<li><a href=\"http://angular-up.com/\">AngularUP</a></li>\n<li><a href=\"http://ng-atl.org/\">ngATL</a></li>\n</ul>\n<p>Passion\nMany of the community members show so much passion, which combined with their wicked smarts means some really cool tools that continue to change the world every day. There's no way I could list all of the amazing people, but here's a few established and new community members you should make sure you follow.</p>\n<ul>\n<li><p><a href=\"https://github.com/mgechev\">Minko Gechev</a>   </p>\n<p>Minko organizes AngularSF and builds awesome tools that help you <a href=\"https://github.com/mgechev/codelyzer\">write better code</a> and <a href=\"https://github.com/mgechev/ngrev\">understand what's going on in your applications</a>.</p></li>\n<li><p><a href=\"https://twitter.com/ladyleet\">Tracy Lee</a>   </p>\n<p>Founder of This Dot, organizer of around a <a href=\"https://www.meetup.com/modernweb/\">thousand meetup groups</a>, she has tech and business savvy and knows how to bring people together.</p></li>\n<li><p><a href=\"https://github.com/manekinekko\">Wassim Chegham</a></p>\n<p>Wassim builds <a href=\"https://actions.cloud/\">beautiful sites</a> with Angular and tries to <a href=\"https://angular.run/\">fill new holes</a> from his experience with real companies.</p></li>\n<li><p><a href=\"https://twitter.com/ericsimons40\">Eric Simmons</a>  </p>\n<p>Eric teaches developers and co-founded the awesome <a href=\"https://stackblitz.com/\">StackBlitz</a> which takes you from zero to productive Angular developer in about 6 seconds</p></li>\n<li><p><a href=\"https://twitter.com/xiao_hanyu\">Hanyu Xiao</a>  </p>\n<p>Hanyu is working to statically analyze AngularJS and Angular applications, and as a side effect, he was able to build a tool that will use this semantic understand of applications to help you <a href=\"https://angulardoc.github.io/\">transition your apps to Angular</a>. </p></li>\n</ul>\n<h2>Positivity</h2>\n<p>Being a developer is hard. We are often asked to justify your choices when there is no clear \"best\" answer. Living on the internet makes this even more difficult because it's extremely easy to get sucked into anonymous \"either or\" battles or \"X vs Y\" conversations which make our work into a zero sum game. A key attribute of the Angular community is its ability to continue to be positive.</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fwhy-I-love-the-angular-community%2Fimage-0.jpg?alt=media&token=9e01cc56-7756-4bd9-a369-bb8f58e2ef7d\" alt=\"Angular hugs\" /></p>\n<p>We can all win. The more we can exhibit respect and the more we do for each other (especially in other communities) the more the state of the industry is going to be advanced. When new ideas are created, proven, and explored, we all benefit. We all want the same things, and realizing that everyone on this planet is on the same side goes a long way towards making this world a place that we all want to live.</p>\n<h2>Thank You</h2>\n<p>The Angular team values:</p>\n<ol>\n<li>Apps that users love to use</li>\n<li>Apps that developers love to build</li>\n<li>A community where everyone feels welcome</li>\n</ol>\n<p>The community is awesome because YOU are awesome, and so I want to say a huge thank you to everyone. You do great work and inspire me to work harder every day to be there for you.</p>"},"title":"Why I Love the Angular Community"},"why-angular-cli-doesnt-expose-webpack":{"body":"The [Angular CLI](https://cli.angular.io/) is an awesome tool that automates many parts of the developer workflow.\n\n1. Scaffolding \n1. Serving Dev Mode\n1. Production Builds\n1. Test Running\n\nIt's amazing in the way that it gets you up and running pushing pixels to the screen using Angular as fast as possible.\n\nIt's problematic in some use cases (Angular Universal being a very common one) in that it doesn't expose any of the underlying webpack config.  Developers ask for this often, and the long term goal is to support add-ons, but a lack of support today is intentional.\n\n## Why not let developers modify the webpack config?\nTL;DR: The team is future proofing your applications for you\n\n### Module Loading and Bundling\nThe state of module loading / bundling is going to change dramatically over the next 12-24 months.\n\nToday, the latest and [freshest versions of Chrome](https://jakearchibald.com/2017/es-modules-in-browsers/) are shipping with ES2015 Module Support, but for the last couple of years, we *already* had SystemJS, Webpack, Closure, and other tools handling JavaScript application bundling, implementing the same [spec](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import). \n\n### Discord between browsers and tools\nBoth browsers and build tools today are implementing the same specifications, but each has very different functionality. Webpack supports local path resolution, browsers don't. Webpack resolves these without runtime processing. The browser can load modules only as needed.\n\nThere are fundamental design differences with both pros and cons. Based on the rate of change in the browsers and bundlers, we can expect each and every bundler to continue to change and improve its functionality. These improvements will likely include changes to the way they load modules, and change the way they produce code for the browser to match both match and to take advantage of the browsers' new capabilities.\n\n### The CLI is protecting you\nIf the CLI let you modify your Webpack configuration, it's very probable that you would do something that wouldn't be compatible with these future changes to the bundlers. By hiding the Webpack config, the Angular CLI can modify the way it uses Webpack to ensure that your code continues to work despite the shifting landscape.\n\n### A crazy future\nThere are also theoretical futures where Webpack is no longer the best option for Angular developers, and at some point in the future the CLI team might decide they want to switch to an alternative tool (Rollup, Closure, something brand new?). By not building your application for Webpack, Angular CLI-based applications can continue to grow and improve without worry about the underlying tools.","date":"2017-06-21","id":"why-angular-cli-doesnt-expose-webpack","image":"https://firebasestorage.googleapis.com/v0/b/fluindotio-website-93127.appspot.com/o/posts%2Fwhy-angular-cli-doesnt-expose-webpack%2Fwebpack-256.svg?alt=media&token=05021b1c-128b-4659-a3b3-dbeac80a2764","images":{"-Kn6S6_CmkcNyimpEfoe":{"filename":"68747470733a2f2f7765627061636b2e6a732e6f72672f6173736574732f69636f6e2d7371756172652d6269672e737667.svg","path":"/posts/why-angular-cli-doesnt-expose-webpack/68747470733a2f2f7765627061636b2e6a732e6f72672f6173736574732f69636f6e2d7371756172652d6269672e737667.svg"},"-Kn6SDhA32j9MZJzn1vm":{"filename":"68747470733a2f2f7765627061636b2e6a732e6f72672f6173736574732f69636f6e2d7371756172652d6269672e737667.svg","path":"/posts/why-angular-cli-doesnt-expose-webpack/68747470733a2f2f7765627061636b2e6a732e6f72672f6173736574732f69636f6e2d7371756172652d6269672e737667.svg"}},"key":"why-angular-cli-doesnt-expose-webpack","renderedBody":"<p>The <a href=\"https://cli.angular.io/\">Angular CLI</a> is an awesome tool that automates many parts of the developer workflow.</p>\n<ol>\n<li>Scaffolding </li>\n<li>Serving Dev Mode</li>\n<li>Production Builds</li>\n<li>Test Running</li>\n</ol>\n<p>It's amazing in the way that it gets you up and running pushing pixels to the screen using Angular as fast as possible.</p>\n<p>It's problematic in some use cases (Angular Universal being a very common one) in that it doesn't expose any of the underlying webpack config.  Developers ask for this often, and the long term goal is to support add-ons, but a lack of support today is intentional.</p>\n<h2>Why not let developers modify the webpack config?</h2>\n<p>TL;DR: The team is future proofing your applications for you</p>\n<h3>Module Loading and Bundling</h3>\n<p>The state of module loading / bundling is going to change dramatically over the next 12-24 months.</p>\n<p>Today, the latest and <a href=\"https://jakearchibald.com/2017/es-modules-in-browsers/\">freshest versions of Chrome</a> are shipping with ES2015 Module Support, but for the last couple of years, we <em>already</em> had SystemJS, Webpack, Closure, and other tools handling JavaScript application bundling, implementing the same <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">spec</a>. </p>\n<h3>Discord between browsers and tools</h3>\n<p>Both browsers and build tools today are implementing the same specifications, but each has very different functionality. Webpack supports local path resolution, browsers don't. Webpack resolves these without runtime processing. The browser can load modules only as needed.</p>\n<p>There are fundamental design differences with both pros and cons. Based on the rate of change in the browsers and bundlers, we can expect each and every bundler to continue to change and improve its functionality. These improvements will likely include changes to the way they load modules, and change the way they produce code for the browser to match both match and to take advantage of the browsers' new capabilities.</p>\n<h3>The CLI is protecting you</h3>\n<p>If the CLI let you modify your Webpack configuration, it's very probable that you would do something that wouldn't be compatible with these future changes to the bundlers. By hiding the Webpack config, the Angular CLI can modify the way it uses Webpack to ensure that your code continues to work despite the shifting landscape.</p>\n<h3>A crazy future</h3>\n<p>There are also theoretical futures where Webpack is no longer the best option for Angular developers, and at some point in the future the CLI team might decide they want to switch to an alternative tool (Rollup, Closure, something brand new?). By not building your application for Webpack, Angular CLI-based applications can continue to grow and improve without worry about the underlying tools.</p>","title":"Why Angular CLI Doesn't Expose Webpack"}}